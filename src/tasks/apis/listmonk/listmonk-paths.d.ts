/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description healthcheck endpoint */
        get: operations["getHealthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns general server config. */
        get: operations["getServerConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lang/{lang}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns the JSON language pack given the language code */
        get: operations["getI18nLang"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/charts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns chart data points to render on the dashboard. */
        get: operations["getDashboardCharts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns stats counts to show on the dashboard */
        get: operations["getDashboardCounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns settings from DB */
        get: operations["getSettings"];
        /** @description returns updated settings from the DB. */
        put: operations["updateSettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/smtp/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description test smtp settings */
        post: operations["testSMTPSettings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/reload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description restarts the app */
        post: operations["reloadApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns the log entries stored in the log buffer */
        get: operations["getLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns all subscribers. */
        get: operations["getSubscribers"];
        put?: never;
        /** @description handles creation of new subscriber */
        post: operations["createSubscriber"];
        /** @description handles subscribers deletion */
        delete: operations["deleteSubscriberByList"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description handles the retrieval of a single subscriber by ID. */
        get: operations["getSubscriberById"];
        /** @description modify subscriber data */
        put: operations["updateSubscriberById"];
        post?: never;
        /** @description handles subscriber deletion based on id */
        delete: operations["deleteSubscriberById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description handles bulk addition or removal of subscribers */
        put: operations["manageSubscriberLists"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/lists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description handles bulk addition or removal of subscribers for a specified list id */
        put: operations["manageSubscriberListById"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/blocklist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description handles blocklisting of subscriber list */
        put: operations["manageBlocklistBySubscriberList"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/{id}/blocklist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description handles the blocklisting of one or more subscribers. */
        put: operations["manageBlocklistSubscribersById"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/{id}/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description retrieves a subscriber's profile */
        get: operations["exportSubscriberDataByID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/{id}/bounces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description retrieves a subscriber's bounce records */
        get: operations["getSubscriberBouncesById"];
        put?: never;
        post?: never;
        /** @description deletes a subscriber's bounce records */
        delete: operations["deleteSubscriberBouncesById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/{id}/optin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description sends an optin confirmation e-mail to a subscriber. */
        post: operations["subscriberSendOptinById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/query/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description bulk deletes based on an arbitrary SQL expression. */
        post: operations["deleteSubscriberByQuery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/query/blocklist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description bulk blocklists subscribers based on an arbitrary SQL expression. */
        put: operations["blocklistSubscribersQuery"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/query/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description bulk adds/removes/unsubscribes subscribers from one or more lists based on an arbitrary SQL expression. */
        put: operations["manageSubscriberListsByQuery"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bounces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description handles retrieval of bounce records. */
        get: operations["getBounces"];
        put?: never;
        post?: never;
        /** @description handles retrieval of bounce records. */
        delete: operations["deleteBounces"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bounces/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description handles retrieval of bounce record by id */
        get: operations["getBounceById"];
        put?: never;
        post?: never;
        /** @description handles bounce deletion, either a single one (ID in the URI), or a list. */
        delete: operations["deleteBounceById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description retrieves lists with additional metadata like subscriber counts. This may be slow. */
        get: operations["getLists"];
        put?: never;
        /** @description handles list creation */
        post: operations["createList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description retrieves lists with additional metadata like subscriber counts. This may be slow. */
        get: operations["getListById"];
        /** @description handles list modification */
        put: operations["updateListById"];
        post?: never;
        /** @description handles list deletion, either a single one (ID in the URI), or a list. */
        delete: operations["deleteListById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/subscribers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns import status. */
        get: operations["getImportSubscribers"];
        put?: never;
        /** @description handles the uploading and bulk importing of a ZIP file of one or more CSV files. */
        post: operations["importSubscribers"];
        /** @description sends a stop signal to the importer. */
        delete: operations["stopImportSubscribers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/subscribers/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns import statistics */
        get: operations["getImportSubscriberStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description handles retrieval of campaigns */
        get: operations["getCampaigns"];
        put?: never;
        /** @description handles campaign creation */
        post: operations["createCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description handles retrieval of campaigns. */
        get: operations["getCampaignById"];
        /** @description handle updation of campaign */
        put: operations["updateCampaignById"];
        post?: never;
        /** @description deletes specified campaign */
        delete: operations["deleteCampaignById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/running/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns stats of a given set of campaign IDs. */
        get: operations["getRunningCampaignStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/analytics/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description retrieves view counts for a campaign. */
        get: operations["getCampaignAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description renders the HTML preview of a campaign body */
        get: operations["previewCampaignById"];
        put?: never;
        /** @description renders the HTML preview of a campaign body */
        post: operations["updatePreviewCampaignById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description renders the HTML preview of a campaign body */
        post: operations["previewCampaignTextById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description handles campaign status modification */
        put: operations["updateCampaignStatusById"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description handles campaign status modification */
        put: operations["updateCampaignArchiveById"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description handles campaign content (body) format conversions. */
        post: operations["createCampaignContentById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description handles sending of campaign message to arbitrary subscribers for testing */
        post: operations["testCampaignById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description handles retrieval of uploaded media. */
        get: operations["getMedia"];
        put?: never;
        /** @description handles media file uploads. */
        post: operations["uploadMedia"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description handles retrieval of uploaded media. */
        get: operations["getMediaById"];
        put?: never;
        post?: never;
        /** @description handles deletion of uploaded media. */
        delete: operations["deleteMediaById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description handles retrieval of templates */
        get: operations["getTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description handles retrieval of templates */
        get: operations["getTemplateById"];
        put?: never;
        post?: never;
        /** @description handles deletion of templates */
        delete: operations["deleteTemplateById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description get the HTML preview of a template. */
        post: operations["previewTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/{id}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description renders the HTML preview of a template. */
        get: operations["previewTemplateById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/{id}/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description handles template modification. */
        put: operations["updateTemplateById"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description send message to a subscriber */
        post: operations["transactWithSubscriber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/maintenance/subscribers/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description garbage collects (deletes) orphaned or blocklisted subscribers. */
        delete: operations["deleteGCSubscribers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/maintenance/analytics/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description garbage collects (deletes) campaign analytics. */
        delete: operations["deleteCampaignAnalyticsByType"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/maintenance/subscriptions/unconfirmed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description garbage collects (deletes) orphaned or blocklisted subscribers. */
        delete: operations["deleteUnconfirmedSubscriptions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns the list of public lists with minimal fields */
        get: operations["getPublicLists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description handles subscription requests coming from public API calls. */
        post: operations["handlePublicSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LanguagePack: {
            data?: {
                "_.code"?: string;
                "_.name"?: string;
                "admin.errorMarshallingConfig"?: string;
                "analytics.count"?: string;
                "analytics.fromDate"?: string;
                "analytics.invalidDates"?: string;
                "analytics.isUnique"?: string;
                "analytics.links"?: string;
                "analytics.nonUnique"?: string;
                "analytics.title"?: string;
                "analytics.toDate"?: string;
                "bounces.source"?: string;
                "bounces.unknownService"?: string;
                "bounces.view"?: string;
                "campaigns.addAltText"?: string;
                "campaigns.archive"?: string;
                "campaigns.archiveEnable"?: string;
                "campaigns.archiveHelp"?: string;
                "campaigns.archiveMeta"?: string;
                "campaigns.archiveMetaHelp"?: string;
                "campaigns.cantUpdate"?: string;
                "campaigns.clicks"?: string;
                "campaigns.confirmDelete"?: string;
                "campaigns.confirmSchedule"?: string;
                "campaigns.confirmSwitchFormat"?: string;
                "campaigns.content"?: string;
                "campaigns.contentHelp"?: string;
                "campaigns.continue"?: string;
                "campaigns.copyOf"?: string;
                "campaigns.customHeadersHelp"?: string;
                "campaigns.dateAndTime"?: string;
                "campaigns.ended"?: string;
                "campaigns.errorSendTest"?: string;
                "campaigns.fieldInvalidBody"?: string;
                "campaigns.fieldInvalidFromEmail"?: string;
                "campaigns.fieldInvalidListIDs"?: string;
                "campaigns.fieldInvalidMessenger"?: string;
                "campaigns.fieldInvalidName"?: string;
                "campaigns.fieldInvalidSendAt"?: string;
                "campaigns.fieldInvalidSubject"?: string;
                "campaigns.formatHTML"?: string;
                "campaigns.fromAddress"?: string;
                "campaigns.fromAddressPlaceholder"?: string;
                "campaigns.invalid"?: string;
                "campaigns.invalidCustomHeaders"?: string;
                "campaigns.markdown"?: string;
                "campaigns.needsSendAt"?: string;
                "campaigns.newCampaign"?: string;
                "campaigns.noKnownSubsToTest"?: string;
                "campaigns.noOptinLists"?: string;
                "campaigns.noSubs"?: string;
                "campaigns.noSubsToTest"?: string;
                "campaigns.notFound"?: string;
                "campaigns.onlyActiveCancel"?: string;
                "campaigns.onlyActivePause"?: string;
                "campaigns.onlyDraftAsScheduled"?: string;
                "campaigns.onlyPausedDraft"?: string;
                "campaigns.onlyScheduledAsDraft"?: string;
                "campaigns.pause"?: string;
                "campaigns.plainText"?: string;
                "campaigns.preview"?: string;
                "campaigns.progress"?: string;
                "campaigns.queryPlaceholder"?: string;
                "campaigns.rateMinuteShort"?: string;
                "campaigns.rawHTML"?: string;
                "campaigns.removeAltText"?: string;
                "campaigns.richText"?: string;
                "campaigns.schedule"?: string;
                "campaigns.scheduled"?: string;
                "campaigns.send"?: string;
                "campaigns.sendLater"?: string;
                "campaigns.sendTest"?: string;
                "campaigns.sendTestHelp"?: string;
                "campaigns.sendToLists"?: string;
                "campaigns.sent"?: string;
                "campaigns.start"?: string;
                "campaigns.started"?: string;
                "campaigns.startedAt"?: string;
                "campaigns.stats"?: string;
                "campaigns.status.cancelled"?: string;
                "campaigns.status.draft"?: string;
                "campaigns.status.finished"?: string;
                "campaigns.status.paused"?: string;
                "campaigns.status.running"?: string;
                "campaigns.status.scheduled"?: string;
                "campaigns.statusChanged"?: string;
                "campaigns.subject"?: string;
                "campaigns.testEmails"?: string;
                "campaigns.testSent"?: string;
                "campaigns.timestamps"?: string;
                "campaigns.trackLink"?: string;
                "campaigns.views"?: string;
                "dashboard.campaignViews"?: string;
                "dashboard.linkClicks"?: string;
                "dashboard.messagesSent"?: string;
                "dashboard.orphanSubs"?: string;
                "email.data.info"?: string;
                "email.data.title"?: string;
                "email.optin.confirmSub"?: string;
                "email.optin.confirmSubHelp"?: string;
                "email.optin.confirmSubInfo"?: string;
                "email.optin.confirmSubTitle"?: string;
                "email.optin.confirmSubWelcome"?: string;
                "email.optin.privateList"?: string;
                "email.status.campaignReason"?: string;
                "email.status.campaignSent"?: string;
                "email.status.campaignUpdateTitle"?: string;
                "email.status.importFile"?: string;
                "email.status.importRecords"?: string;
                "email.status.importTitle"?: string;
                "email.status.status"?: string;
                "email.unsub"?: string;
                "email.unsubHelp"?: string;
                "email.viewInBrowser"?: string;
                "forms.formHTML"?: string;
                "forms.formHTMLHelp"?: string;
                "forms.noPublicLists"?: string;
                "forms.publicLists"?: string;
                "forms.publicSubPage"?: string;
                "forms.selectHelp"?: string;
                "forms.title"?: string;
                "globals.buttons.add"?: string;
                "globals.buttons.addNew"?: string;
                "globals.buttons.back"?: string;
                "globals.buttons.cancel"?: string;
                "globals.buttons.clone"?: string;
                "globals.buttons.close"?: string;
                "globals.buttons.continue"?: string;
                "globals.buttons.delete"?: string;
                "globals.buttons.deleteAll"?: string;
                "globals.buttons.edit"?: string;
                "globals.buttons.enabled"?: string;
                "globals.buttons.insert"?: string;
                "globals.buttons.learnMore"?: string;
                "globals.buttons.more"?: string;
                "globals.buttons.new"?: string;
                "globals.buttons.ok"?: string;
                "globals.buttons.remove"?: string;
                "globals.buttons.save"?: string;
                "globals.buttons.saveChanges"?: string;
                "globals.days.0"?: string;
                "globals.days.1"?: string;
                "globals.days.2"?: string;
                "globals.days.3"?: string;
                "globals.days.4"?: string;
                "globals.days.5"?: string;
                "globals.days.6"?: string;
                "globals.days.7"?: string;
                "globals.fields.createdAt"?: string;
                "globals.fields.description"?: string;
                "globals.fields.id"?: string;
                "globals.fields.name"?: string;
                "globals.fields.status"?: string;
                "globals.fields.type"?: string;
                "globals.fields.updatedAt"?: string;
                "globals.fields.uuid"?: string;
                "globals.messages.confirm"?: string;
                "globals.messages.confirmDiscard"?: string;
                "globals.messages.created"?: string;
                "globals.messages.deleted"?: string;
                "globals.messages.deletedCount"?: string;
                "globals.messages.done"?: string;
                "globals.messages.emptyState"?: string;
                "globals.messages.errorCreating"?: string;
                "globals.messages.errorDeleting"?: string;
                "globals.messages.errorFetching"?: string;
                "globals.messages.errorInvalidIDs"?: string;
                "globals.messages.errorUUID"?: string;
                "globals.messages.errorUpdating"?: string;
                "globals.messages.internalError"?: string;
                "globals.messages.invalidData"?: string;
                "globals.messages.invalidID"?: string;
                "globals.messages.invalidUUID"?: string;
                "globals.messages.missingFields"?: string;
                "globals.messages.notFound"?: string;
                "globals.messages.passwordChange"?: string;
                "globals.messages.updated"?: string;
                "globals.months.1"?: string;
                "globals.months.10"?: string;
                "globals.months.11"?: string;
                "globals.months.12"?: string;
                "globals.months.2"?: string;
                "globals.months.3"?: string;
                "globals.months.4"?: string;
                "globals.months.5"?: string;
                "globals.months.6"?: string;
                "globals.months.7"?: string;
                "globals.months.8"?: string;
                "globals.months.9"?: string;
                "globals.states.off"?: string;
                "globals.terms.all"?: string;
                "globals.terms.analytics"?: string;
                "globals.terms.bounce"?: string;
                "globals.terms.bounces"?: string;
                "globals.terms.campaign"?: string;
                "globals.terms.campaigns"?: string;
                "globals.terms.dashboard"?: string;
                "globals.terms.day"?: string;
                "globals.terms.hour"?: string;
                "globals.terms.list"?: string;
                "globals.terms.lists"?: string;
                "globals.terms.media"?: string;
                "globals.terms.messenger"?: string;
                "globals.terms.messengers"?: string;
                "globals.terms.minute"?: string;
                "globals.terms.month"?: string;
                "globals.terms.second"?: string;
                "globals.terms.settings"?: string;
                "globals.terms.subscriber"?: string;
                "globals.terms.subscribers"?: string;
                "globals.terms.subscriptions"?: string;
                "globals.terms.tag"?: string;
                "globals.terms.tags"?: string;
                "globals.terms.template"?: string;
                "globals.terms.templates"?: string;
                "globals.terms.tx"?: string;
                "globals.terms.year"?: string;
                "import.alreadyRunning"?: string;
                "import.blocklist"?: string;
                "import.csvDelim"?: string;
                "import.csvDelimHelp"?: string;
                "import.csvExample"?: string;
                "import.csvFile"?: string;
                "import.csvFileHelp"?: string;
                "import.errorCopyingFile"?: string;
                "import.errorProcessingZIP"?: string;
                "import.errorStarting"?: string;
                "import.importDone"?: string;
                "import.importStarted"?: string;
                "import.instructions"?: string;
                "import.instructionsHelp"?: string;
                "import.invalidDelim"?: string;
                "import.invalidFile"?: string;
                "import.invalidMode"?: string;
                "import.invalidParams"?: string;
                "import.invalidSubStatus"?: string;
                "import.listSubHelp"?: string;
                "import.mode"?: string;
                "import.overwrite"?: string;
                "import.overwriteHelp"?: string;
                "import.recordsCount"?: string;
                "import.stopImport"?: string;
                "import.subscribe"?: string;
                "import.subscribeWarning"?: string;
                "import.title"?: string;
                "import.upload"?: string;
                "lists.confirmDelete"?: string;
                "lists.confirmSub"?: string;
                "lists.invalidName"?: string;
                "lists.newList"?: string;
                "lists.optin"?: string;
                "lists.optinHelp"?: string;
                "lists.optinTo"?: string;
                "lists.optins.double"?: string;
                "lists.optins.single"?: string;
                "lists.sendCampaign"?: string;
                "lists.sendOptinCampaign"?: string;
                "lists.type"?: string;
                "lists.typeHelp"?: string;
                "lists.types.private"?: string;
                "lists.types.public"?: string;
                "logs.title"?: string;
                "maintenance.help"?: string;
                "maintenance.maintenance.unconfirmedOptins"?: string;
                "maintenance.olderThan"?: string;
                "maintenance.title"?: string;
                "maintenance.unconfirmedSubs"?: string;
                "media.errorReadingFile"?: string;
                "media.errorResizing"?: string;
                "media.errorSavingThumbnail"?: string;
                "media.errorUploading"?: string;
                "media.invalidFile"?: string;
                "media.title"?: string;
                "media.unsupportedFileType"?: string;
                "media.upload"?: string;
                "media.uploadHelp"?: string;
                "media.uploadImage"?: string;
                "menu.allCampaigns"?: string;
                "menu.allLists"?: string;
                "menu.allSubscribers"?: string;
                "menu.dashboard"?: string;
                "menu.forms"?: string;
                "menu.import"?: string;
                "menu.logs"?: string;
                "menu.maintenance"?: string;
                "menu.media"?: string;
                "menu.newCampaign"?: string;
                "menu.settings"?: string;
                "public.archiveEmpty"?: string;
                "public.archiveTitle"?: string;
                "public.blocklisted"?: string;
                "public.campaignNotFound"?: string;
                "public.confirmOptinSubTitle"?: string;
                "public.confirmSub"?: string;
                "public.confirmSubInfo"?: string;
                "public.confirmSubTitle"?: string;
                "public.dataRemoved"?: string;
                "public.dataRemovedTitle"?: string;
                "public.dataSent"?: string;
                "public.dataSentTitle"?: string;
                "public.errorFetchingCampaign"?: string;
                "public.errorFetchingEmail"?: string;
                "public.errorFetchingLists"?: string;
                "public.errorProcessingRequest"?: string;
                "public.errorTitle"?: string;
                "public.invalidFeature"?: string;
                "public.invalidLink"?: string;
                "public.managePrefs"?: string;
                "public.managePrefsUnsub"?: string;
                "public.noListsAvailable"?: string;
                "public.noListsSelected"?: string;
                "public.noSubInfo"?: string;
                "public.noSubTitle"?: string;
                "public.notFoundTitle"?: string;
                "public.prefsSaved"?: string;
                "public.privacyConfirmWipe"?: string;
                "public.privacyExport"?: string;
                "public.privacyExportHelp"?: string;
                "public.privacyTitle"?: string;
                "public.privacyWipe"?: string;
                "public.privacyWipeHelp"?: string;
                "public.sub"?: string;
                "public.subConfirmed"?: string;
                "public.subConfirmedTitle"?: string;
                "public.subName"?: string;
                "public.subNotFound"?: string;
                "public.subOptinPending"?: string;
                "public.subPrivateList"?: string;
                "public.subTitle"?: string;
                "public.unsub"?: string;
                "public.unsubFull"?: string;
                "public.unsubHelp"?: string;
                "public.unsubTitle"?: string;
                "public.unsubbedInfo"?: string;
                "public.unsubbedTitle"?: string;
                "public.unsubscribeTitle"?: string;
                "settings.appearance.adminHelp"?: string;
                "settings.appearance.adminName"?: string;
                "settings.appearance.customCSS"?: string;
                "settings.appearance.customJS"?: string;
                "settings.appearance.name"?: string;
                "settings.appearance.publicHelp"?: string;
                "settings.appearance.publicName"?: string;
                "settings.bounces.action"?: string;
                "settings.bounces.blocklist"?: string;
                "settings.bounces.count"?: string;
                "settings.bounces.countHelp"?: string;
                "settings.bounces.delete"?: string;
                "settings.bounces.enable"?: string;
                "settings.bounces.enableMailbox"?: string;
                "settings.bounces.enableSES"?: string;
                "settings.bounces.enableSendgrid"?: string;
                "settings.bounces.enablePostmark"?: string;
                "settings.bounces.enableWebhooks"?: string;
                "settings.bounces.enabled"?: string;
                "settings.bounces.folder"?: string;
                "settings.bounces.folderHelp"?: string;
                "settings.bounces.invalidScanInterval"?: string;
                "settings.bounces.name"?: string;
                "settings.bounces.scanInterval"?: string;
                "settings.bounces.scanIntervalHelp"?: string;
                "settings.bounces.sendgridKey"?: string;
                "settings.bounces.postmarkUsername"?: string;
                "settings.bounces.postmarkUsernameHelp"?: string;
                "settings.bounces.postmarkPassword"?: string;
                "settings.bounces.type"?: string;
                "settings.bounces.username"?: string;
                "settings.confirmRestart"?: string;
                "settings.duplicateMessengerName"?: string;
                "settings.errorEncoding"?: string;
                "settings.errorNoSMTP"?: string;
                "settings.general.adminNotifEmails"?: string;
                "settings.general.adminNotifEmailsHelp"?: string;
                "settings.general.checkUpdates"?: string;
                "settings.general.checkUpdatesHelp"?: string;
                "settings.general.enablePublicArchive"?: string;
                "settings.general.enablePublicArchiveHelp"?: string;
                "settings.general.enablePublicSubPage"?: string;
                "settings.general.enablePublicSubPageHelp"?: string;
                "settings.general.faviconURL"?: string;
                "settings.general.faviconURLHelp"?: string;
                "settings.general.fromEmail"?: string;
                "settings.general.fromEmailHelp"?: string;
                "settings.general.language"?: string;
                "settings.general.logoURL"?: string;
                "settings.general.logoURLHelp"?: string;
                "settings.general.name"?: string;
                "settings.general.rootURL"?: string;
                "settings.general.rootURLHelp"?: string;
                "settings.general.sendOptinConfirm"?: string;
                "settings.general.sendOptinConfirmHelp"?: string;
                "settings.general.siteName"?: string;
                "settings.invalidMessengerName"?: string;
                "settings.mailserver.authProtocol"?: string;
                "settings.mailserver.host"?: string;
                "settings.mailserver.hostHelp"?: string;
                "settings.mailserver.idleTimeout"?: string;
                "settings.mailserver.idleTimeoutHelp"?: string;
                "settings.mailserver.maxConns"?: string;
                "settings.mailserver.maxConnsHelp"?: string;
                "settings.mailserver.password"?: string;
                "settings.mailserver.passwordHelp"?: string;
                "settings.mailserver.port"?: string;
                "settings.mailserver.portHelp"?: string;
                "settings.mailserver.skipTLS"?: string;
                "settings.mailserver.skipTLSHelp"?: string;
                "settings.mailserver.tls"?: string;
                "settings.mailserver.tlsHelp"?: string;
                "settings.mailserver.username"?: string;
                "settings.mailserver.waitTimeout"?: string;
                "settings.mailserver.waitTimeoutHelp"?: string;
                "settings.media.provider"?: string;
                "settings.media.s3.bucket"?: string;
                "settings.media.s3.bucketPath"?: string;
                "settings.media.s3.bucketPathHelp"?: string;
                "settings.media.s3.bucketType"?: string;
                "settings.media.s3.bucketTypePrivate"?: string;
                "settings.media.s3.bucketTypePublic"?: string;
                "settings.media.s3.key"?: string;
                "settings.media.s3.publicURL"?: string;
                "settings.media.s3.publicURLHelp"?: string;
                "settings.media.s3.region"?: string;
                "settings.media.s3.secret"?: string;
                "settings.media.s3.uploadExpiry"?: string;
                "settings.media.s3.uploadExpiryHelp"?: string;
                "settings.media.s3.url"?: string;
                "settings.media.s3.urlHelp"?: string;
                "settings.media.title"?: string;
                "settings.media.upload.path"?: string;
                "settings.media.upload.pathHelp"?: string;
                "settings.media.upload.uri"?: string;
                "settings.media.upload.uriHelp"?: string;
                "settings.messengers.maxConns"?: string;
                "settings.messengers.maxConnsHelp"?: string;
                "settings.messengers.messageSaved"?: string;
                "settings.messengers.name"?: string;
                "settings.messengers.nameHelp"?: string;
                "settings.messengers.password"?: string;
                "settings.messengers.retries"?: string;
                "settings.messengers.retriesHelp"?: string;
                "settings.messengers.skipTLSHelp"?: string;
                "settings.messengers.timeout"?: string;
                "settings.messengers.timeoutHelp"?: string;
                "settings.messengers.url"?: string;
                "settings.messengers.urlHelp"?: string;
                "settings.messengers.username"?: string;
                "settings.needsRestart"?: string;
                "settings.performance.batchSize"?: string;
                "settings.performance.batchSizeHelp"?: string;
                "settings.performance.concurrency"?: string;
                "settings.performance.concurrencyHelp"?: string;
                "settings.performance.maxErrThreshold"?: string;
                "settings.performance.maxErrThresholdHelp"?: string;
                "settings.performance.messageRate"?: string;
                "settings.performance.messageRateHelp"?: string;
                "settings.performance.name"?: string;
                "settings.performance.slidingWindow"?: string;
                "settings.performance.slidingWindowDuration"?: string;
                "settings.performance.slidingWindowDurationHelp"?: string;
                "settings.performance.slidingWindowHelp"?: string;
                "settings.performance.slidingWindowRate"?: string;
                "settings.performance.slidingWindowRateHelp"?: string;
                "settings.privacy.allowBlocklist"?: string;
                "settings.privacy.allowBlocklistHelp"?: string;
                "settings.privacy.allowExport"?: string;
                "settings.privacy.allowExportHelp"?: string;
                "settings.privacy.allowPrefs"?: string;
                "settings.privacy.allowPrefsHelp"?: string;
                "settings.privacy.allowWipe"?: string;
                "settings.privacy.allowWipeHelp"?: string;
                "settings.privacy.domainBlocklist"?: string;
                "settings.privacy.domainBlocklistHelp"?: string;
                "settings.privacy.individualSubTracking"?: string;
                "settings.privacy.individualSubTrackingHelp"?: string;
                "settings.privacy.listUnsubHeader"?: string;
                "settings.privacy.listUnsubHeaderHelp"?: string;
                "settings.privacy.name"?: string;
                "settings.restart"?: string;
                "settings.smtp.customHeaders"?: string;
                "settings.smtp.customHeadersHelp"?: string;
                "settings.smtp.enabled"?: string;
                "settings.smtp.heloHost"?: string;
                "settings.smtp.heloHostHelp"?: string;
                "settings.smtp.name"?: string;
                "settings.smtp.retries"?: string;
                "settings.smtp.retriesHelp"?: string;
                "settings.smtp.sendTest"?: string;
                "settings.smtp.setCustomHeaders"?: string;
                "settings.smtp.testConnection"?: string;
                "settings.smtp.testEnterEmail"?: string;
                "settings.smtp.toEmail"?: string;
                "settings.title"?: string;
                "settings.updateAvailable"?: string;
                "subscribers.advancedQuery"?: string;
                "subscribers.advancedQueryHelp"?: string;
                "subscribers.attribs"?: string;
                "subscribers.attribsHelp"?: string;
                "subscribers.blocklistedHelp"?: string;
                "subscribers.confirmBlocklist"?: string;
                "subscribers.confirmDelete"?: string;
                "subscribers.confirmExport"?: string;
                "subscribers.domainBlocklisted"?: string;
                "subscribers.downloadData"?: string;
                "subscribers.email"?: string;
                "subscribers.emailExists"?: string;
                "subscribers.errorBlocklisting"?: string;
                "subscribers.errorNoIDs"?: string;
                "subscribers.errorNoListsGiven"?: string;
                "subscribers.errorPreparingQuery"?: string;
                "subscribers.errorSendingOptin"?: string;
                "subscribers.export"?: string;
                "subscribers.invalidAction"?: string;
                "subscribers.invalidEmail"?: string;
                "subscribers.invalidJSON"?: string;
                "subscribers.invalidName"?: string;
                "subscribers.listChangeApplied"?: string;
                "subscribers.lists"?: string;
                "subscribers.listsHelp"?: string;
                "subscribers.listsPlaceholder"?: string;
                "subscribers.manageLists"?: string;
                "subscribers.markUnsubscribed"?: string;
                "subscribers.newSubscriber"?: string;
                "subscribers.numSelected"?: string;
                "subscribers.optinSubject"?: string;
                "subscribers.preconfirm"?: string;
                "subscribers.preconfirmHelp"?: string;
                "subscribers.query"?: string;
                "subscribers.queryPlaceholder"?: string;
                "subscribers.reset"?: string;
                "subscribers.selectAll"?: string;
                "subscribers.sendOptinConfirm"?: string;
                "subscribers.sentOptinConfirm"?: string;
                "subscribers.status.blocklisted"?: string;
                "subscribers.status.confirmed"?: string;
                "subscribers.status.enabled"?: string;
                "subscribers.status.subscribed"?: string;
                "subscribers.status.unconfirmed"?: string;
                "subscribers.status.unsubscribed"?: string;
                "subscribers.subscribersDeleted"?: string;
                "templates.cantDeleteDefault"?: string;
                "templates.default"?: string;
                "templates.dummyName"?: string;
                "templates.dummySubject"?: string;
                "templates.errorCompiling"?: string;
                "templates.errorRendering"?: string;
                "templates.fieldInvalidName"?: string;
                "templates.makeDefault"?: string;
                "templates.newTemplate"?: string;
                "templates.placeholderHelp"?: string;
                "templates.preview"?: string;
                "templates.rawHTML"?: string;
                "templates.subject"?: string;
                "users.login"?: string;
                "users.logout"?: string;
            };
        };
        ServerConfig: {
            data?: {
                messengers?: string[];
                langs?: {
                    code?: string;
                    name?: string;
                }[];
                lang?: string;
                update?: string;
                needs_restart?: boolean;
                version?: string;
            };
        };
        DashboardChart: {
            link_clicks?: {
                count?: number;
                date?: string;
            }[];
            campaign_views?: {
                count?: number;
                date?: string;
            }[];
        };
        DashboardCount: {
            data?: {
                subscribers?: {
                    total?: number;
                    blocklisted?: Record<string, never>;
                    orphans?: number;
                };
                lists?: {
                    total?: number;
                    private?: number;
                    public?: number;
                    optin_single?: number;
                    optin_double?: number;
                };
                campaigns?: {
                    total?: number;
                    by_status?: {
                        draft?: number;
                    };
                };
                messages?: number;
            };
        };
        SMTPSettings: {
            uuid?: string;
            enabled?: boolean;
            host?: string;
            hello_hostname?: string;
            port?: number;
            auth_protocol?: string;
            username?: string;
            email_headers?: Record<string, never>[];
            max_conns?: number;
            max_msg_retries?: number;
            idle_timeout?: string;
            wait_timeout?: string;
            tls_type?: string;
            tls_skip_verify?: boolean;
        };
        SMTPTest: {
            uuid?: string;
            enabled?: boolean;
            host?: string;
            hello_hostname?: string;
            port?: number;
            auth_protocol?: string;
            username?: string;
            email_headers?: Record<string, never>[];
            max_conns?: number;
            max_msg_retries?: number;
            idle_timeout?: string;
            wait_timeout?: string;
            tls_type?: string;
            tls_skip_verify?: boolean;
            strEmailHeaders?: string;
            password?: string;
            email?: string;
        };
        MailBoxBounces: {
            uuid?: string;
            enabled?: boolean;
            type?: string;
            host?: string;
            port?: number;
            auth_protocol?: string;
            return_path?: string;
            username?: string;
            tls_enabled?: boolean;
            tls_skip_verify?: boolean;
            scan_interval?: string;
        };
        Settings: {
            "app.site_name"?: string;
            "app.root_url"?: string;
            "app.logo_url"?: string;
            "app.favicon_url"?: string;
            "app.from_email"?: string;
            "app.notify_emails"?: string[];
            "app.enable_public_subscription_page"?: boolean;
            "app.enable_public_archive"?: boolean;
            "app.send_optin_confirmation"?: boolean;
            "app.check_updates"?: boolean;
            "app.lang"?: string;
            "app.batch_size"?: number;
            "app.concurrency"?: number;
            "app.max_send_errors"?: number;
            "app.message_rate"?: number;
            "app.message_sliding_window"?: boolean;
            "app.message_sliding_window_duration"?: string;
            "app.message_sliding_window_rate"?: number;
            "privacy.individual_tracking"?: boolean;
            "privacy.unsubscribe_header"?: boolean;
            "privacy.allow_blocklist"?: boolean;
            "privacy.allow_preferences"?: boolean;
            "privacy.allow_export"?: boolean;
            "privacy.allow_wipe"?: boolean;
            "privacy.exportable"?: string[];
            "privacy.domain_blocklist"?: Record<string, never>[];
            "upload.provider"?: string;
            "upload.filesystem.upload_path"?: string;
            "upload.filesystem.upload_uri"?: string;
            "upload.s3.url"?: string;
            "upload.s3.public_url"?: string;
            "upload.s3.aws_access_key_id"?: string;
            "upload.s3.aws_default_region"?: string;
            "upload.s3.bucket"?: string;
            "upload.s3.bucket_domain"?: string;
            "upload.s3.bucket_path"?: string;
            "upload.s3.bucket_type"?: string;
            "upload.s3.expiry"?: string;
            smtp?: components["schemas"]["SMTPSettings"][];
            messengers?: Record<string, never>[];
            "bounce.enabled"?: boolean;
            "bounce.webhooks_enabled"?: boolean;
            "bounce.count"?: number;
            "bounce.action"?: string;
            "bounce.ses_enabled"?: boolean;
            "bounce.sendgrid_enabled"?: boolean;
            "bounce.sendgrid_key"?: string;
            "bounce.postmark_enabled"?: boolean;
            "bounce.postmark_username"?: string;
            "bounce.postmark_password"?: string;
            "bounce.mailboxes"?: components["schemas"]["MailBoxBounces"][];
            "appearance.admin.custom_css"?: string;
            "appearance.admin.custom_js"?: string;
            "appearance.public.custom_css"?: string;
            "appearance.public.custom_js"?: string;
        };
        SubscriberProfile: {
            id?: number;
            uuid?: string;
            email?: string;
            name?: string;
            /** @example {
             *       "city": {
             *         "type": "string"
             *       },
             *       "good": {
             *         "type": "boolean"
             *       },
             *       "type": {
             *         "type": "string"
             *       }
             *     } */
            attribs?: {
                [key: string]: unknown;
            };
            status?: string;
            created_at?: string;
            updated_at?: string;
        };
        Subscriptions: {
            subscription_status?: string;
            name?: string;
            type?: string;
            created_at?: string;
        };
        SubscriberData: {
            email?: string;
            profile?: components["schemas"]["SubscriberProfile"][];
            subscriptions?: components["schemas"]["Subscriptions"][];
            campaign_views?: Record<string, never>[];
            link_clicks?: Record<string, never>[];
        };
        Subscriber: {
            id?: number;
            created_at?: string;
            updated_at?: string;
            uuid?: string;
            email?: string;
            name?: string;
            /** @example {
             *       "city": {
             *         "type": "string"
             *       },
             *       "good": {
             *         "type": "boolean"
             *       },
             *       "type": {
             *         "type": "string"
             *       }
             *     } */
            attribs?: {
                [key: string]: unknown;
            };
            status?: string;
            lists?: {
                subscription_status?: string;
                id?: number;
                uuid?: string;
                name?: string;
                type?: string;
                tags?: string[];
                created_at?: string;
                updated_at?: string;
            }[];
        };
        NewSubscriber: {
            email?: string;
            name?: string;
            status?: string;
            lists?: number[];
            list_uuids?: string[];
            preconfirm_subscriptions?: boolean;
            /** @example {
             *       "city": {
             *         "type": "string"
             *       },
             *       "projects": {
             *         "type": "integer"
             *       },
             *       "stack": {
             *         "type": "object",
             *         "properties": {
             *           "languages": {
             *             "type": "array",
             *             "items": {
             *               "type": "string"
             *             }
             *           }
             *         }
             *       }
             *     } */
            attribs?: {
                [key: string]: unknown;
            };
        };
        UpdateSubscriber: {
            email?: string;
            name?: string;
            status?: string;
            lists?: number[];
            list_uuids?: string[];
            preconfirm_subscriptions?: boolean;
            /** @example {
             *       "city": {
             *         "type": "string"
             *       },
             *       "projects": {
             *         "type": "integer"
             *       },
             *       "stack": {
             *         "type": "object",
             *         "properties": {
             *           "languages": {
             *             "type": "array",
             *             "items": {
             *               "type": "string"
             *             }
             *           }
             *         }
             *       }
             *     } */
            attribs?: {
                [key: string]: unknown;
            };
        };
        SubscriberQueryRequest: {
            query?: string;
            /** @description The ids of the subscribers to be modified. */
            ids?: number[];
            /**
             * @description Whether to add, remove, or unsubscribe the users.
             * @enum {string}
             */
            action?: "add" | "remove" | "unsubscribe";
            /** @description The ids of the lists to be modified. */
            target_list_ids?: number;
            /**
             * @description confirmed, unconfirmed, or unsubscribed status.
             * @enum {string}
             */
            status?: "confirmed" | "unconfirmed" | "unsubscribed";
        };
        Bounce: {
            results?: {
                id?: number;
                type?: string;
                source?: string;
                meta?: Record<string, never>;
                created_at?: string;
                email?: string;
                subscriber_uuid?: string;
                subscriber_id?: number;
                campaign?: {
                    id?: number;
                    name?: string;
                };
                campaign_uuid?: string;
                total?: number;
            }[];
        };
        List: {
            id?: number;
            created_at?: string;
            updated_at?: string;
            uuid?: string;
            name?: string;
            type?: string;
            optin?: string;
            tags?: string[];
            subscriber_count?: number;
        };
        NewList: {
            name?: string;
            /** @enum {string} */
            type?: "public" | "private";
            /** @enum {string} */
            optin?: "single" | "double";
            tags?: string[];
        };
        ImportStatus: {
            data?: {
                name?: string;
                total?: number;
                imported?: number;
                status?: string;
            };
        };
        Campaign: {
            id?: number;
            created_at?: string;
            updated_at?: string;
            CampaignID?: number;
            views?: number;
            clicks?: number;
            lists?: {
                id?: number;
                name?: string;
            }[];
            started_at?: string;
            to_send?: number;
            sent?: number;
            uuid?: string;
            /** @enum {string} */
            type?: "regular" | "optin";
            name?: string;
            subject?: string;
            from_email?: string;
            body?: string;
            send_at?: string;
            status?: string;
            /** @enum {string} */
            content_type?: "richtext" | "html" | "markdown" | "plain";
            tags?: string[];
            template_id?: number;
            messenger?: string;
        };
        CampaignContentRequest: {
            id?: number;
            created_at?: string;
            updated_at?: string;
            CampaignID?: number;
            views?: number;
            clicks?: number;
            lists?: {
                id?: number;
                name?: string;
            }[];
            started_at?: string;
            to_send?: number;
            sent?: number;
            uuid?: string;
            /** @enum {string} */
            type?: "regular" | "optin";
            name?: string;
            subject?: string;
            from_email?: string;
            body?: string;
            send_at?: string;
            status?: string;
            /** @enum {string} */
            content_type?: "richtext" | "html" | "markdown" | "plain";
            tags?: string[];
            template_id?: number;
            messenger?: string;
            from?: string;
            to?: string;
        };
        CampaignRequest: {
            name?: string;
            subject?: string;
            lists?: number[];
            from_email?: string;
            content_type?: string;
            messenger?: string;
            type?: string;
            tags?: string[];
            send_later?: boolean;
            send_at?: {
                headers?: Record<string, never>[];
                template_id?: number;
            };
        };
        CampaignUpdate: {
            name?: string;
            subject?: string;
            lists?: number[];
            from_email?: string;
            messenger?: string;
            type?: string;
            tags?: string[];
            send_later?: boolean;
            send_at?: Record<string, never>;
            headers?: Record<string, never>[];
            template_id?: number;
            content_type?: string;
            body?: string;
            altbody?: string;
            archive?: boolean;
            archive_template_id?: number;
            archive_meta?: Record<string, never>;
        };
        CampaignStats: {
            id?: number;
            status?: string;
            to_send?: number;
            sent?: number;
            /** Format: date */
            started_at?: string;
            /** Format: date */
            updated_at?: string;
            rate?: number;
            net_rate?: number;
        };
        CampaignAnalyticsCount: {
            campaign_id?: number;
            count?: number;
            /** Format: date-time */
            timestamp?: string;
        };
        MediaFileObject: {
            id?: number;
            uuid?: string;
            filename?: string;
            created_at?: string;
            thumb_url?: string;
            uri?: string;
        };
        Template: {
            id?: number;
            created_at?: string;
            updated_at?: string;
            name?: string;
            body?: string;
            type?: string;
            is_default?: boolean;
        };
        TransactionalMessage: {
            subscriber_email?: string;
            subscriber_id?: number;
            template_id?: number;
            from_email?: string;
            data?: Record<string, never>;
            headers?: Record<string, never>[];
            messenger?: string;
            content_type?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getServerConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A server config object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ServerConfig"];
                    };
                };
            };
        };
    };
    getI18nLang: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description JSON language pack required */
                lang: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description requested language pack */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LanguagePack"];
                    };
                };
            };
        };
    };
    getDashboardCharts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description chart data points */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["DashboardChart"];
                    };
                };
            };
        };
    };
    getDashboardCounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description stat counts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["DashboardCount"];
                    };
                };
            };
        };
    };
    getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description settings object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Settings"];
                    };
                };
            };
        };
    };
    updateSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description updated settings field values */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Settings"];
            };
        };
        responses: {
            /** @description updated settings object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    testSMTPSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description updated SMTP settings field values */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SMTPTest"];
            };
        };
        responses: {
            /** @description updated SMTP test settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    reloadApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getLogs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description stored log entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: string[];
                    };
                };
            };
        };
    };
    getSubscribers: {
        parameters: {
            query?: {
                /** @description number of records to skip */
                page?: number;
                /** @description max number of records to return per page */
                per_page?: number;
                /** @description query subscribers with an SQL expression. */
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description subscribers list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            results?: components["schemas"]["Subscriber"][];
                            query?: string;
                            total?: number;
                            per_page?: number;
                            page?: number;
                        };
                    };
                };
            };
        };
    };
    createSubscriber: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description new subscriber info */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewSubscriber"];
            };
        };
        responses: {
            /** @description subscriber object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Subscriber"];
                    };
                };
            };
        };
    };
    deleteSubscriberByList: {
        parameters: {
            query: {
                /** @description subscriber id/s to be deleted */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getSubscriberById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the subscriber you want to get. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description gets a single subscriber. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Subscriber"];
                    };
                };
            };
        };
    };
    updateSubscriberById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of subscriber to update */
                id: number;
            };
            cookie?: never;
        };
        /** @description new subscriber info */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateSubscriber"];
            };
        };
        responses: {
            /** @description returns updated subscriber. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Subscriber"];
                    };
                };
            };
        };
    };
    deleteSubscriberById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the subscriber you want to get. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    manageSubscriberLists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The list of subscribers details to add or remove */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriberQueryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    manageSubscriberListById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of list you want to update */
                id: number;
            };
            cookie?: never;
        };
        /** @description The list of subscribers to add or remove */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriberQueryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    manageBlocklistBySubscriberList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The list of subscribers to blocklist */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriberQueryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    manageBlocklistSubscribersById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the subscriber you want to blocklist. */
                id: number;
            };
            cookie?: never;
        };
        /** @description The id of subscriber to add or remove */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriberQueryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    exportSubscriberDataByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of subscriber profile you want to export */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description subscriber data object */
            200: {
                headers: {
                    "Cache-Control"?: string;
                    "Content-Disposition"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriberData"];
                };
            };
        };
    };
    getSubscriberBouncesById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description subscriber id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of bounce records of a subscriber */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Bounce"][];
                    };
                };
            };
        };
    };
    deleteSubscriberBouncesById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description subscriber id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    subscriberSendOptinById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sends an optin confirmation e-mail to a subscriber */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    deleteSubscriberByQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Arbitrary SQL expression. */
        requestBody?: {
            content: {
                "text/plain": string;
                "application/json": components["schemas"]["SubscriberQueryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    blocklistSubscribersQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Arbitrary SQL expression. */
        requestBody?: {
            content: {
                "text/plain": string;
                "application/json": components["schemas"]["SubscriberQueryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    manageSubscriberListsByQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Arbitrary SQL expression. */
        requestBody?: {
            content: {
                "text/plain": string;
                "application/json": components["schemas"]["SubscriberQueryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getBounces: {
        parameters: {
            query?: {
                /** @description bounce record retrieval of particular campaign */
                campaign_id?: number;
                /** @description total number of pages */
                page?: number;
                /** @description number of items per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description output parameters form */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    source?: string;
                    order_by?: string;
                    order?: string;
                };
            };
        };
        responses: {
            /** @description list of bounce records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            results?: components["schemas"]["Bounce"][];
                            query?: string;
                            total?: number;
                            per_page?: number;
                            page?: number;
                        };
                    };
                };
            };
        };
    };
    deleteBounces: {
        parameters: {
            query?: {
                /** @description flag for multiple bounce record deletion */
                all?: boolean;
                /** @description list of bounce ids to delete */
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getBounceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the bounce you want to retreive. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description bounce object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Bounce"];
                    };
                };
            };
        };
    };
    deleteBounceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the bounce you want to delete. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getLists: {
        parameters: {
            query?: {
                /** @description total number of pages */
                page?: number;
                /** @description number of items per page */
                per_page?: number;
                /** @description Optional string to search a list by name. */
                query?: string;
                /** @description Field to sort results by. name|status|created_at|updated_at */
                order_by?: string;
                /** @description ASC|DESC Sort by ascending or descending order. */
                order?: string;
                minimal?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of metadata */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            results?: components["schemas"]["List"][];
                            total?: number;
                            per_page?: number;
                            page?: number;
                        };
                    };
                };
            };
        };
    };
    createList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description new list info */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewList"];
            };
        };
        responses: {
            /** @description updated list object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["List"];
                    };
                };
            };
        };
    };
    getListById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the list you want to retreive. */
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["List"];
                    };
                };
            };
        };
    };
    updateListById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the list you want to update */
                list_id: number;
            };
            cookie?: never;
        };
        /** @description updated list field values */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["List"];
            };
        };
        responses: {
            /** @description updated list object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["List"];
                    };
                };
            };
        };
    };
    deleteListById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the lists you want to delete. */
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getImportSubscribers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description import status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ImportStatus"];
                    };
                };
            };
        };
    };
    importSubscribers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description uploads and bulk imports of compressed CSV files */
        requestBody?: {
            content: {
                "application/json": {
                    params?: string;
                    file?: string;
                };
            };
        };
        responses: {
            /** @description updated import status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ImportStatus"];
                    };
                };
            };
        };
    };
    stopImportSubscribers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ImportStatus"];
                    };
                };
            };
        };
    };
    getImportSubscriberStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description import statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: string;
                    };
                };
            };
        };
    };
    getCampaigns: {
        parameters: {
            query?: {
                /** @description status flag of campaign */
                status?: ("scheduled" | "running" | "paused" | "cancelled")[];
                /** @description boolean flag for response with/without body */
                no_body?: boolean;
                /** @description total number of pages */
                page?: number;
                /** @description number of items per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description output parameters form */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Optional string to search a list by name. */
                    query?: string;
                    /** @description Field to sort results by. name|status|created_at|updated_at */
                    order_by?: string;
                    /** @description ASC|DESC Sort by ascending or descending order. */
                    order?: string;
                };
            };
        };
        responses: {
            /** @description list of campaigns */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            results?: components["schemas"]["Campaign"][];
                            query?: string;
                            total?: number;
                            per_page?: number;
                            page?: number;
                        };
                    };
                };
            };
        };
    };
    createCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description new campaign info */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CampaignRequest"];
            };
        };
        responses: {
            /** @description new campaign object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CampaignUpdate"];
                    };
                };
            };
        };
    };
    getCampaignById: {
        parameters: {
            query?: {
                /** @description boolean flag for response with/without body */
                no_body?: boolean;
            };
            header?: never;
            path: {
                /** @description The id value of the campaign you want to get. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description campaign object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Campaign"];
                    };
                };
            };
        };
    };
    updateCampaignById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the id value of campaign you want to update */
                id: number;
            };
            cookie?: never;
        };
        /** @description updated campaign fields */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CampaignRequest"];
            };
        };
        responses: {
            /** @description updated campaign object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CampaignUpdate"];
                    };
                };
            };
        };
    };
    deleteCampaignById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the campaign you want to get. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getRunningCampaignStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of stats for given set of campaign ids */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CampaignStats"][];
                    };
                };
            };
        };
    };
    getCampaignAnalytics: {
        parameters: {
            query: {
                /** @description start value of date range */
                from: string;
                /** @description end value of date range */
                to: string;
                /** @description campaign id/s to retrive view counts */
                id?: string;
            };
            header?: never;
            path: {
                /** @description type of stats, either links, view, click or bounce */
                type: "links" | "views" | "clicks" | "bounces";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of stats for given set of campaign ids */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CampaignAnalyticsCount"][];
                    };
                };
            };
        };
    };
    previewCampaignById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the campaign you want to get the preview of */
                id: number;
            };
            cookie?: never;
        };
        /** @description template id */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description template id */
                    template_id?: number;
                };
            };
        };
        responses: {
            /** @description HTML Preview of requested campaign */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    updatePreviewCampaignById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the campaign you want to get the preview of */
                id: number;
            };
            cookie?: never;
        };
        /** @description template id, body and content type */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description template id */
                    template_id?: number;
                    /** @description content type */
                    content_type?: string;
                    /** @description template body */
                    body?: string;
                };
            };
        };
        responses: {
            /** @description HTML Preview of requested campaign */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    previewCampaignTextById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the campaign you want to get the preview of */
                id: number;
            };
            cookie?: never;
        };
        /** @description template id, content type and campaign body */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description template id */
                    template_id?: number;
                    /** @description content type */
                    content_type?: string;
                    /** @description campaign body */
                    body?: string;
                };
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    updateCampaignStatusById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the campaign you want to get the preview of */
                id: number;
            };
            cookie?: never;
        };
        /** @description campaign status update */
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    status?: "scheduled" | "running" | "paused" | "cancelled";
                };
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Campaign"];
                    };
                };
            };
        };
    };
    updateCampaignArchiveById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the campaign you want to get the preview of */
                id: number;
            };
            cookie?: never;
        };
        /** @description archive campaign related parameters */
        requestBody?: {
            content: {
                "application/json": {
                    archive?: boolean;
                    archive_template_id?: number;
                    archive_meta?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    createCampaignContentById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of campaign that you choose to create content */
                id: number;
            };
            cookie?: never;
        };
        /** @description updated campaign content */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CampaignContentRequest"];
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: string;
                    };
                };
            };
        };
    };
    testCampaignById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of campaign that you want to test */
                id: number;
            };
            cookie?: never;
        };
        /** @description template id */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description template id */
                    template_id?: number;
                };
                "application/json": components["schemas"]["CampaignRequest"];
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getMedia: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MediaFileObject"][];
                    };
                };
            };
        };
    };
    uploadMedia: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description upload media file */
        requestBody?: {
            content: {
                "multipart/form-data": string;
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MediaFileObject"];
                    };
                };
            };
        };
    };
    getMediaById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description media file id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MediaFileObject"];
                    };
                };
            };
        };
    };
    deleteMediaById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the list you want to delete. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    getTemplates: {
        parameters: {
            query: {
                /** @description boolean flag for response with/without body */
                no_body: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Template"][];
                    };
                };
            };
        };
    };
    getTemplateById: {
        parameters: {
            query?: {
                /** @description boolean flag for response with/without body */
                no_body?: boolean;
            };
            header?: never;
            path: {
                /** @description The id value of the template you want to get. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Template"];
                    };
                };
            };
        };
    };
    deleteTemplateById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the template you want to delete. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    previewTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description template parameters */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description type of template */
                    template_type?: string;
                    /** @description template body */
                    body?: string;
                };
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    previewTemplateById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the template you want to get. */
                id: number;
            };
            cookie?: never;
        };
        /** @description template parameters */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description type of template */
                    template_type?: string;
                    /** @description template body */
                    body?: string;
                };
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    updateTemplateById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id value of the template you want to set to the default template. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Template"];
                };
            };
        };
    };
    transactWithSubscriber: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description email message to a subscriber */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransactionalMessage"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    deleteGCSubscribers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description type of GC collected subscribers */
                type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            count?: number;
                        };
                    };
                };
            };
        };
    };
    deleteCampaignAnalyticsByType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description type of GC collected subscribers */
                type: string;
            };
            cookie?: never;
        };
        /** @description date parameter */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** Format: date */
                    before_date?: string;
                };
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: boolean;
                    };
                };
            };
        };
    };
    deleteUnconfirmedSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description date parameter */
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** Format: date */
                    before_date?: string;
                };
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            count?: number;
                        };
                    };
                };
            };
        };
    };
    getPublicLists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        uuid?: string;
                        name?: string;
                    }[];
                };
            };
        };
    };
    handlePublicSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description subscription request parameters */
        requestBody?: {
            content: {
                "application/json": {
                    name?: string;
                    email?: string;
                    list_uuids?: string[];
                };
            };
        };
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        has_optin?: boolean;
                    };
                };
            };
        };
    };
}
