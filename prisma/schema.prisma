datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["tracing"]
}

generator pothos {
  provider    = "prisma-pothos-types"
  prismaUtils = "true"
}

generator pothosCrud {
  provider            = "prisma-generator-pothos-codegen"
  generatorConfigPath = "./pothos.config.ts"
}

enum ConferenceState {
  PRE // the conference is created but applying is not possible yet
  PARTICIPANT_REGISTRATION // applications are open
  PREPARATION // preparation starts, e.g. participants can assign in the given boundaries what they want to do (e.g. head delegate decides who is going into which committee)
  ACTIVE // the conference is currently running
  POST // the conference is over and things like downloading the participation certificate are possible
}

model Conference {
  id              String          @id @default(nanoid())
  title           String
  longTitle       String?
  location        String?
  language        String?
  website         String?
  imageDataURL    String?
  info            String?
  state           ConferenceState @default(PRE)
  startAssignment DateTime
  startConference DateTime
  endConference   DateTime

  individualApplicationOptions CustomConferenceRole[]
  delegations                  Delegation[]
  nonStateActors               NonStateActor[]
  conferenceSupervisors        ConferenceSupervisor[]
  conferenceUserStatus         ConferenceParticipantStatus[]
  teamMembers                  TeamMember[]
  committees                   Committee[]
  singleParticipants           SingleParticipant[]
  delegationMembers            DelegationMember[]
}

model Committee {
  id                      String @id @default(nanoid())
  name                    String
  abbreviation            String
  numOfSeatsPerDelegation Int    @default(1)

  conference        Conference         @relation(fields: [conferenceId], references: [id], onDelete: Cascade)
  conferenceId      String
  nations           Nation[]
  delegationMembers DelegationMember[]
}

enum FoodPreference {
  OMNIVORE
  VEGETARIAN
  VEGAN
}

model User {
  id String @id @default(nanoid())

  // these are OIDC fields and only will be updated by the issuer in the login flow
  email              String
  family_name        String
  given_name         String
  locale             String
  preferred_username String

  // custom data fields
  birthday       DateTime?
  phone          String?
  street         String?
  apartment      String?
  zip            String?
  city           String?
  country        String?
  gender         String?
  pronouns       String?
  foodPreference FoodPreference?

  wantsToReceiveGeneralInformation Boolean @default(false)
  wantsJoinTeamInformation         Boolean @default(false)

  delegationMemberships       DelegationMember[]
  conferenceSupervisor        ConferenceSupervisor[]
  conferenceParticipantStatus ConferenceParticipantStatus[]
  teamMember                  TeamMember[]
  singleParticipant           SingleParticipant[]
}

enum AdministrativeStatus {
  DONE
  PROBLEM
  PENDING
}

// administrative status of a user in a conference, used for storing e.g. payment status, postal application status, etc.
model ConferenceParticipantStatus {
  id                 String               @id @default(nanoid())
  postalRegistration AdministrativeStatus @default(PENDING)
  paymentStatus      AdministrativeStatus @default(PENDING)
  didAttend          Boolean              @default(false)

  user         User       @relation(fields: [userId], references: [id])
  userId       String
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId String
}

model Nation {
  alpha3Code String @id
  alpha2Code String @unique
  // other properties are fetched from nation databases/libraries which do not want to maintain on our own
  // e.g. localized names, flags, etc.

  roleApplications RoleApplication[]
  committees       Committee[]

  assignedDelegations Delegation[]
}

model NonStateActor {
  id              String  @id @default(nanoid())
  name            String
  description     String
  fontAwesomeIcon String?
  abbreviation    String
  seatAmount      Int     @default(2)

  conference       Conference        @relation(fields: [conferenceId], references: [id], onDelete: Cascade)
  conferenceId     String
  roleApplications RoleApplication[]

  assignedDelegations Delegation[]

  @@unique([conferenceId, abbreviation])
  @@unique([conferenceId, name])
}

// these can be journalists, judges, etc.
model CustomConferenceRole {
  id              String  @id @default(nanoid())
  name            String
  description     String
  fontAwesomeIcon String?

  conference        Conference          @relation(fields: [conferenceId], references: [id], onDelete: Cascade)
  conferenceId      String
  singleParticipant SingleParticipant[]

  singleParticipantAssignments SingleParticipant[] @relation("assignment")

  @@unique([conferenceId, name])
}

model SingleParticipant {
  id           String     @id @default(nanoid())
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  applied Boolean @default(false)

  school     String?
  motivation String?
  experience String?

  /// For example the country of an IGH judge
  assignmentDetails String?
  assignedRole      CustomConferenceRole? @relation(name: "assignment", fields: [assignedRoleId], references: [id])
  assignedRoleId    String?

  appliedForRoles CustomConferenceRole[]

  @@unique([conferenceId, userId])
}

model Delegation {
  id         String  @id @default(nanoid())
  school     String?
  motivation String?
  experience String?
  /// wether the delegation has submitted their application
  /// after submitting the entity should not be able to change
  applied    Boolean @default(false)
  // this will always be auto generated
  entryCode  String  @unique

  conference      Conference             @relation(fields: [conferenceId], references: [id])
  conferenceId    String
  members         DelegationMember[]
  supervisors     ConferenceSupervisor[]
  appliedForRoles RoleApplication[]

  assignedNation           Nation? @relation(fields: [assignedNationAlpha3Code], references: [alpha3Code])
  assignedNationAlpha3Code String?

  assignedNonStateActor   NonStateActor? @relation(fields: [assignedNonStateActorId], references: [id])
  assignedNonStateActorId String?
}

model RoleApplication {
  id           String     @id @default(nanoid())
  delegation   Delegation @relation(fields: [delegationId], references: [id], onDelete: Cascade)
  delegationId String
  rank         Int

  // only one can be set at a time
  // the application is either a nation or a nsa
  nation          Nation?        @relation(fields: [nationId], references: [alpha3Code])
  nationId        String?
  nonStateActor   NonStateActor? @relation(fields: [nonStateActorId], references: [id])
  nonStateActorId String?

  @@unique([delegationId, nationId])
  @@unique([delegationId, nonStateActorId])
  @@unique([delegationId, rank])
}

model DelegationMember {
  id                  String     @id @default(nanoid())
  conference          Conference @relation(fields: [conferenceId], references: [id])
  conferenceId        String
  delegation          Delegation @relation(fields: [delegationId], references: [id], onDelete: Cascade)
  delegationId        String
  user                User       @relation(fields: [userId], references: [id])
  userId              String
  isHeadDelegate      Boolean
  assignedCommittee   Committee? @relation(fields: [assignedCommitteeId], references: [id])
  assignedCommitteeId String?

  postAssignmentConferenceSupervisors ConferenceSupervisor[]

  // users can only be once in this delegation
  @@unique([delegationId, userId])
  // users can only be in one delegation per conference
  @@unique([conferenceId, userId])
}

model ConferenceSupervisor {
  id                             String  @id @default(nanoid())
  plansOwnAttendenceAtConference Boolean

  // since this entity can be edited by the users themselves we
  // want to prevent the following fields to ever show up in input models 
  conference   Conference   @relation(fields: [conferenceId], references: [id])
  conferenceId String
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  // this also never will be set directly but via a check of the entry code for delegations
  // therefore no update/create call ever should include this
  delegations  Delegation[]

  // after assignment the supervisors lose their delegation access and gain a member access
  // this is for pricacy reasons since the assignment process might add user which are not
  // related to the supervisor in any way to a delegation they are supervising
  // which would render their data open to read for a completely unknown person
  postAssignmentDelegeationMembers DelegationMember[]

  @@unique([conferenceId, userId])
}

enum TeamRole {
  PROJECT_MANAGEMENT
  PARTICIPANT_CARE
  MEMBER
}

model TeamMember {
  id           String     @id @default(nanoid())
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  role         TeamRole   @default(MEMBER)

  @@unique([conferenceId, userId])
}
