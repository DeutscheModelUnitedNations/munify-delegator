"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

enum AdministrativeStatus {
  DONE
  PENDING
  PROBLEM
}

"""Batch payloads from prisma."""
type BatchPayload {
  """Prisma Batch Payload"""
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""A committee in a conference. E.g. the human rights council"""
type Committee {
  abbreviation: String!
  conference: Conference!
  delegationMembers: [DelegationMember!]!
  id: ID!
  name: String!
  nations: [Nation!]!
  numOfSeatsPerDelegation: Int!
}

input CommitteeCreateInput {
  abbreviation: String!
  conferenceId: String!
  createdAt: DateTime
  delegationMembers: DelegationMemberCreateNestedManyWithoutAssignedCommitteeInput
  id: String
  name: String!
  nations: NationCreateNestedManyWithoutCommitteesInput
  numOfSeatsPerDelegation: Int
  updatedAt: DateTime
}

input CommitteeCreateNestedManyWithoutConferenceInput {
  connect: [CommitteeWhereUniqueInput!]
}

input CommitteeCreateNestedManyWithoutNationsInput {
  connect: [CommitteeWhereUniqueInput!]
}

input CommitteeListRelationFilter {
  every: CommitteeWhereInput
  none: CommitteeWhereInput
  some: CommitteeWhereInput
}

input CommitteeNullableScalarRelationFilter {
  is: CommitteeWhereInput
  isNot: CommitteeWhereInput
}

input CommitteeOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommitteeOrderByWithRelationInput {
  abbreviation: SortOrder
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  delegationMembers: DelegationMemberOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  nations: NationOrderByRelationAggregateInput
  numOfSeatsPerDelegation: SortOrder
  updatedAt: SortOrder
}

enum CommitteeScalarFieldEnum {
  abbreviation
  conferenceId
  createdAt
  id
  name
  numOfSeatsPerDelegation
  updatedAt
}

input CommitteeUpdateInput {
  abbreviation: StringFieldUpdateOperationsInput
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  delegationMembers: DelegationMemberUpdateManyWithoutAssignedCommitteeNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  nations: NationUpdateManyWithoutCommitteesNestedInput
  numOfSeatsPerDelegation: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommitteeUpdateManyMutationInput {
  abbreviation: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  numOfSeatsPerDelegation: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommitteeUpdateManyWithoutConferenceNestedInput {
  connect: [CommitteeWhereUniqueInput!]
  disconnect: [CommitteeWhereUniqueInput!]
  set: [CommitteeWhereUniqueInput!]
}

input CommitteeUpdateManyWithoutNationsNestedInput {
  connect: [CommitteeWhereUniqueInput!]
  disconnect: [CommitteeWhereUniqueInput!]
  set: [CommitteeWhereUniqueInput!]
}

input CommitteeWhereInput {
  AND: [CommitteeWhereInput!]
  NOT: [CommitteeWhereInput!]
  OR: [CommitteeWhereInput!]
  abbreviation: StringFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  delegationMembers: DelegationMemberListRelationFilter
  id: StringFilter
  name: StringFilter
  nations: NationListRelationFilter
  numOfSeatsPerDelegation: IntFilter
  updatedAt: DateTimeFilter
}

input CommitteeWhereUniqueInput {
  AND: [CommitteeWhereInput!]
  NOT: [CommitteeWhereInput!]
  OR: [CommitteeWhereInput!]
  abbreviation: StringFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  delegationMembers: DelegationMemberListRelationFilter
  id: String
  name: StringFilter
  nations: NationListRelationFilter
  numOfSeatsPerDelegation: IntFilter
  updatedAt: DateTimeFilter
}

"""A conference in the system"""
type Conference {
  accountHolder: String
  bankName: String
  bic: String
  committees: [Committee!]!
  conferenceSupervisors: [ConferenceSupervisor!]!
  conferenceUserStatus: [ConferenceParticipantStatus!]!
  currency: String
  delegationMembers: [DelegationMember!]!
  delegations: [Delegation!]!
  endConference: DateTime!
  feeAmount: Float
  guardianConsentContent: String
  iban: String
  id: ID!
  imageDataURL: String
  individualApplicationOptions: [CustomConferenceRole!]!
  info: String
  language: String
  linkToPreparationGuide: String
  location: String
  longTitle: String
  mediaConsentContent: String
  nonStateActors: [NonStateActor!]!
  paymentTransactions: [PaymentTransaction!]!
  postalApartment: String
  postalCity: String
  postalCountry: String
  postalName: String
  postalStreet: String
  postalZip: String
  singleParticipants: [SingleParticipant!]!
  startAssignment: DateTime!
  startConference: DateTime!
  state: ConferenceState!
  teamMembers: [TeamMember!]!

  """Legal document content"""
  termsAndConditionsContent: String
  title: String!

  """Payment and Postal information"""
  unlockPayments: Boolean!
  unlockPostals: Boolean!
  website: String
}

input ConferenceCreateInput {
  accountHolder: String
  bankName: String
  bic: String
  committees: CommitteeCreateNestedManyWithoutConferenceInput
  conferenceSupervisors: ConferenceSupervisorCreateNestedManyWithoutConferenceInput
  conferenceUserStatus: ConferenceParticipantStatusCreateNestedManyWithoutConferenceInput
  createdAt: DateTime
  currency: String
  delegationMembers: DelegationMemberCreateNestedManyWithoutConferenceInput
  delegations: DelegationCreateNestedManyWithoutConferenceInput
  endConference: DateTime!
  feeAmount: Float
  guardianConsentContent: String
  iban: String
  id: String
  imageDataURL: String
  individualApplicationOptions: CustomConferenceRoleCreateNestedManyWithoutConferenceInput
  info: String
  language: String
  linkToPreparationGuide: String
  location: String
  longTitle: String
  mediaConsentContent: String
  nonStateActors: NonStateActorCreateNestedManyWithoutConferenceInput
  paymentTransactions: PaymentTransactionCreateNestedManyWithoutConferenceInput
  postalApartment: String
  postalCity: String
  postalCountry: String
  postalName: String
  postalStreet: String
  postalZip: String
  singleParticipants: SingleParticipantCreateNestedManyWithoutConferenceInput
  startAssignment: DateTime!
  startConference: DateTime!
  state: ConferenceState
  teamMembers: TeamMemberCreateNestedManyWithoutConferenceInput
  termsAndConditionsContent: String
  title: String!
  unlockPayments: Boolean
  unlockPostals: Boolean
  updatedAt: DateTime
  website: String
}

input ConferenceOrderByWithRelationInput {
  accountHolder: SortOrder
  bankName: SortOrder
  bic: SortOrder
  committees: CommitteeOrderByRelationAggregateInput
  conferenceSupervisors: ConferenceSupervisorOrderByRelationAggregateInput
  conferenceUserStatus: ConferenceParticipantStatusOrderByRelationAggregateInput
  createdAt: SortOrder
  currency: SortOrder
  delegationMembers: DelegationMemberOrderByRelationAggregateInput
  delegations: DelegationOrderByRelationAggregateInput
  endConference: SortOrder
  feeAmount: SortOrder
  guardianConsentContent: SortOrder
  iban: SortOrder
  id: SortOrder
  imageDataURL: SortOrder
  individualApplicationOptions: CustomConferenceRoleOrderByRelationAggregateInput
  info: SortOrder
  language: SortOrder
  linkToPreparationGuide: SortOrder
  location: SortOrder
  longTitle: SortOrder
  mediaConsentContent: SortOrder
  nonStateActors: NonStateActorOrderByRelationAggregateInput
  paymentTransactions: PaymentTransactionOrderByRelationAggregateInput
  postalApartment: SortOrder
  postalCity: SortOrder
  postalCountry: SortOrder
  postalName: SortOrder
  postalStreet: SortOrder
  postalZip: SortOrder
  singleParticipants: SingleParticipantOrderByRelationAggregateInput
  startAssignment: SortOrder
  startConference: SortOrder
  state: SortOrder
  teamMembers: TeamMemberOrderByRelationAggregateInput
  termsAndConditionsContent: SortOrder
  title: SortOrder
  unlockPayments: SortOrder
  unlockPostals: SortOrder
  updatedAt: SortOrder
  website: SortOrder
}

type ConferenceParticipantStatus {
  conference: Conference!
  didAttend: Boolean!
  guardianConsent: AdministrativeStatus!
  id: ID!
  mediaConsent: AdministrativeStatus!
  paymentStatus: AdministrativeStatus!
  termsAndConditions: AdministrativeStatus!
  user: User!
}

input ConferenceParticipantStatusCreateInput {
  conferenceId: String!
  createdAt: DateTime
  didAttend: Boolean
  guardianConsent: AdministrativeStatus
  id: String
  mediaConsent: AdministrativeStatus
  paymentStatus: AdministrativeStatus
  termsAndConditions: AdministrativeStatus
  updatedAt: DateTime
  userId: String!
}

input ConferenceParticipantStatusCreateNestedManyWithoutConferenceInput {
  connect: [ConferenceParticipantStatusWhereUniqueInput!]
}

input ConferenceParticipantStatusCreateNestedManyWithoutUserInput {
  connect: [ConferenceParticipantStatusWhereUniqueInput!]
}

input ConferenceParticipantStatusListRelationFilter {
  every: ConferenceParticipantStatusWhereInput
  none: ConferenceParticipantStatusWhereInput
  some: ConferenceParticipantStatusWhereInput
}

input ConferenceParticipantStatusOrderByRelationAggregateInput {
  _count: SortOrder
}

input ConferenceParticipantStatusOrderByWithRelationInput {
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  didAttend: SortOrder
  guardianConsent: SortOrder
  id: SortOrder
  mediaConsent: SortOrder
  paymentStatus: SortOrder
  termsAndConditions: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ConferenceParticipantStatusScalarFieldEnum {
  conferenceId
  createdAt
  didAttend
  guardianConsent
  id
  mediaConsent
  paymentStatus
  termsAndConditions
  updatedAt
  userId
}

input ConferenceParticipantStatusUpdateInput {
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  didAttend: BoolFieldUpdateOperationsInput
  guardianConsent: EnumAdministrativeStatusFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mediaConsent: EnumAdministrativeStatusFieldUpdateOperationsInput
  paymentStatus: EnumAdministrativeStatusFieldUpdateOperationsInput
  termsAndConditions: EnumAdministrativeStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ConferenceParticipantStatusUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  didAttend: BoolFieldUpdateOperationsInput
  guardianConsent: EnumAdministrativeStatusFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mediaConsent: EnumAdministrativeStatusFieldUpdateOperationsInput
  paymentStatus: EnumAdministrativeStatusFieldUpdateOperationsInput
  termsAndConditions: EnumAdministrativeStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConferenceParticipantStatusUpdateManyWithoutConferenceNestedInput {
  connect: [ConferenceParticipantStatusWhereUniqueInput!]
  disconnect: [ConferenceParticipantStatusWhereUniqueInput!]
  set: [ConferenceParticipantStatusWhereUniqueInput!]
}

input ConferenceParticipantStatusUpdateManyWithoutUserNestedInput {
  connect: [ConferenceParticipantStatusWhereUniqueInput!]
  disconnect: [ConferenceParticipantStatusWhereUniqueInput!]
  set: [ConferenceParticipantStatusWhereUniqueInput!]
}

input ConferenceParticipantStatusUserIdConferenceIdCompoundUniqueInput {
  conferenceId: String!
  userId: String!
}

input ConferenceParticipantStatusWhereInput {
  AND: [ConferenceParticipantStatusWhereInput!]
  NOT: [ConferenceParticipantStatusWhereInput!]
  OR: [ConferenceParticipantStatusWhereInput!]
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  didAttend: BoolFilter
  guardianConsent: EnumAdministrativeStatusFilter
  id: StringFilter
  mediaConsent: EnumAdministrativeStatusFilter
  paymentStatus: EnumAdministrativeStatusFilter
  termsAndConditions: EnumAdministrativeStatusFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ConferenceParticipantStatusWhereUniqueInput {
  AND: [ConferenceParticipantStatusWhereInput!]
  NOT: [ConferenceParticipantStatusWhereInput!]
  OR: [ConferenceParticipantStatusWhereInput!]
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  didAttend: BoolFilter
  guardianConsent: EnumAdministrativeStatusFilter
  id: String
  mediaConsent: EnumAdministrativeStatusFilter
  paymentStatus: EnumAdministrativeStatusFilter
  termsAndConditions: EnumAdministrativeStatusFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
  userId_conferenceId: ConferenceParticipantStatusUserIdConferenceIdCompoundUniqueInput
}

input ConferenceParticipantStatusWhereUniqueInputNotRequired {
  conferenceId: ID!
  id: ID
  userId: ID!
}

enum ConferenceScalarFieldEnum {
  accountHolder
  bankName
  bic
  createdAt
  currency
  endConference
  feeAmount
  guardianConsentContent
  iban
  id
  imageDataURL
  info
  language
  linkToPreparationGuide
  location
  longTitle
  mediaConsentContent
  postalApartment
  postalCity
  postalCountry
  postalName
  postalStreet
  postalZip
  startAssignment
  startConference
  state
  termsAndConditionsContent
  title
  unlockPayments
  unlockPostals
  updatedAt
  website
}

input ConferenceScalarRelationFilter {
  is: ConferenceWhereInput
  isNot: ConferenceWhereInput
}

enum ConferenceState {
  ACTIVE
  PARTICIPANT_REGISTRATION
  POST
  PRE
  PREPARATION
}

"""
Supervisors are passive participants in conferences. Often they are teachers overseeing their students.
"""
type ConferenceSupervisor {
  conference: Conference!
  delegations: [Delegation!]!
  id: ID!
  plansOwnAttendenceAtConference: Boolean!
  user: User!
}

input ConferenceSupervisorConferenceIdUserIdCompoundUniqueInput {
  conferenceId: String!
  userId: String!
}

input ConferenceSupervisorCreateInput {
  conferenceId: String!
  createdAt: DateTime
  delegations: DelegationCreateNestedManyWithoutSupervisorsInput
  id: String
  plansOwnAttendenceAtConference: Boolean!
  postAssignmentDelegeationMembers: DelegationMemberCreateNestedManyWithoutPostAssignmentConferenceSupervisorsInput
  updatedAt: DateTime
  userId: String!
}

input ConferenceSupervisorCreateNestedManyWithoutConferenceInput {
  connect: [ConferenceSupervisorWhereUniqueInput!]
}

input ConferenceSupervisorCreateNestedManyWithoutDelegationsInput {
  connect: [ConferenceSupervisorWhereUniqueInput!]
}

input ConferenceSupervisorCreateNestedManyWithoutPostAssignmentDelegeationMembersInput {
  connect: [ConferenceSupervisorWhereUniqueInput!]
}

input ConferenceSupervisorCreateNestedManyWithoutUserInput {
  connect: [ConferenceSupervisorWhereUniqueInput!]
}

input ConferenceSupervisorListRelationFilter {
  every: ConferenceSupervisorWhereInput
  none: ConferenceSupervisorWhereInput
  some: ConferenceSupervisorWhereInput
}

input ConferenceSupervisorOrderByRelationAggregateInput {
  _count: SortOrder
}

input ConferenceSupervisorOrderByWithRelationInput {
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  delegations: DelegationOrderByRelationAggregateInput
  id: SortOrder
  plansOwnAttendenceAtConference: SortOrder
  postAssignmentDelegeationMembers: DelegationMemberOrderByRelationAggregateInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ConferenceSupervisorScalarFieldEnum {
  conferenceId
  createdAt
  id
  plansOwnAttendenceAtConference
  updatedAt
  userId
}

input ConferenceSupervisorUpdateDataInput {
  plansOwnAttendenceAtConference: Boolean
}

input ConferenceSupervisorUpdateInput {
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  delegations: DelegationUpdateManyWithoutSupervisorsNestedInput
  id: StringFieldUpdateOperationsInput
  plansOwnAttendenceAtConference: BoolFieldUpdateOperationsInput
  postAssignmentDelegeationMembers: DelegationMemberUpdateManyWithoutPostAssignmentConferenceSupervisorsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ConferenceSupervisorUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  plansOwnAttendenceAtConference: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConferenceSupervisorUpdateManyWithoutConferenceNestedInput {
  connect: [ConferenceSupervisorWhereUniqueInput!]
  disconnect: [ConferenceSupervisorWhereUniqueInput!]
  set: [ConferenceSupervisorWhereUniqueInput!]
}

input ConferenceSupervisorUpdateManyWithoutDelegationsNestedInput {
  connect: [ConferenceSupervisorWhereUniqueInput!]
  disconnect: [ConferenceSupervisorWhereUniqueInput!]
  set: [ConferenceSupervisorWhereUniqueInput!]
}

input ConferenceSupervisorUpdateManyWithoutPostAssignmentDelegeationMembersNestedInput {
  connect: [ConferenceSupervisorWhereUniqueInput!]
  disconnect: [ConferenceSupervisorWhereUniqueInput!]
  set: [ConferenceSupervisorWhereUniqueInput!]
}

input ConferenceSupervisorUpdateManyWithoutUserNestedInput {
  connect: [ConferenceSupervisorWhereUniqueInput!]
  disconnect: [ConferenceSupervisorWhereUniqueInput!]
  set: [ConferenceSupervisorWhereUniqueInput!]
}

input ConferenceSupervisorWhereInput {
  AND: [ConferenceSupervisorWhereInput!]
  NOT: [ConferenceSupervisorWhereInput!]
  OR: [ConferenceSupervisorWhereInput!]
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  delegations: DelegationListRelationFilter
  id: StringFilter
  plansOwnAttendenceAtConference: BoolFilter
  postAssignmentDelegeationMembers: DelegationMemberListRelationFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ConferenceSupervisorWhereUniqueInput {
  AND: [ConferenceSupervisorWhereInput!]
  NOT: [ConferenceSupervisorWhereInput!]
  OR: [ConferenceSupervisorWhereInput!]
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  conferenceId_userId: ConferenceSupervisorConferenceIdUserIdCompoundUniqueInput
  createdAt: DateTimeFilter
  delegations: DelegationListRelationFilter
  id: String
  plansOwnAttendenceAtConference: BoolFilter
  postAssignmentDelegeationMembers: DelegationMemberListRelationFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ConferenceUpdateDataInput {
  accountHolder: String
  bankName: String
  bic: String
  currency: String
  endConference: DateTime
  feeAmount: Float
  guardianConsentContent: String
  iban: String
  image: File
  info: String
  language: String
  linkToPreparationGuide: String
  location: String
  longTitle: String
  mediaConsentContent: String
  postalApartment: String
  postalCity: String
  postalCountry: String
  postalName: String
  postalStreet: String
  postalZip: String
  startAssignment: DateTime
  startConference: DateTime
  state: ConferenceState
  termsAndConditionsContent: String
  title: String
  unlockPayments: Boolean
  unlockPostals: Boolean
  website: String
}

input ConferenceUpdateInput {
  accountHolder: NullableStringFieldUpdateOperationsInput
  bankName: NullableStringFieldUpdateOperationsInput
  bic: NullableStringFieldUpdateOperationsInput
  committees: CommitteeUpdateManyWithoutConferenceNestedInput
  conferenceSupervisors: ConferenceSupervisorUpdateManyWithoutConferenceNestedInput
  conferenceUserStatus: ConferenceParticipantStatusUpdateManyWithoutConferenceNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  currency: NullableStringFieldUpdateOperationsInput
  delegationMembers: DelegationMemberUpdateManyWithoutConferenceNestedInput
  delegations: DelegationUpdateManyWithoutConferenceNestedInput
  endConference: DateTimeFieldUpdateOperationsInput
  feeAmount: NullableFloatFieldUpdateOperationsInput
  guardianConsentContent: NullableStringFieldUpdateOperationsInput
  iban: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageDataURL: NullableStringFieldUpdateOperationsInput
  individualApplicationOptions: CustomConferenceRoleUpdateManyWithoutConferenceNestedInput
  info: NullableStringFieldUpdateOperationsInput
  language: NullableStringFieldUpdateOperationsInput
  linkToPreparationGuide: NullableStringFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  longTitle: NullableStringFieldUpdateOperationsInput
  mediaConsentContent: NullableStringFieldUpdateOperationsInput
  nonStateActors: NonStateActorUpdateManyWithoutConferenceNestedInput
  paymentTransactions: PaymentTransactionUpdateManyWithoutConferenceNestedInput
  postalApartment: NullableStringFieldUpdateOperationsInput
  postalCity: NullableStringFieldUpdateOperationsInput
  postalCountry: NullableStringFieldUpdateOperationsInput
  postalName: NullableStringFieldUpdateOperationsInput
  postalStreet: NullableStringFieldUpdateOperationsInput
  postalZip: NullableStringFieldUpdateOperationsInput
  singleParticipants: SingleParticipantUpdateManyWithoutConferenceNestedInput
  startAssignment: DateTimeFieldUpdateOperationsInput
  startConference: DateTimeFieldUpdateOperationsInput
  state: EnumConferenceStateFieldUpdateOperationsInput
  teamMembers: TeamMemberUpdateManyWithoutConferenceNestedInput
  termsAndConditionsContent: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  unlockPayments: BoolFieldUpdateOperationsInput
  unlockPostals: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input ConferenceUpdateManyMutationInput {
  accountHolder: NullableStringFieldUpdateOperationsInput
  bankName: NullableStringFieldUpdateOperationsInput
  bic: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  currency: NullableStringFieldUpdateOperationsInput
  endConference: DateTimeFieldUpdateOperationsInput
  feeAmount: NullableFloatFieldUpdateOperationsInput
  guardianConsentContent: NullableStringFieldUpdateOperationsInput
  iban: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageDataURL: NullableStringFieldUpdateOperationsInput
  info: NullableStringFieldUpdateOperationsInput
  language: NullableStringFieldUpdateOperationsInput
  linkToPreparationGuide: NullableStringFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  longTitle: NullableStringFieldUpdateOperationsInput
  mediaConsentContent: NullableStringFieldUpdateOperationsInput
  postalApartment: NullableStringFieldUpdateOperationsInput
  postalCity: NullableStringFieldUpdateOperationsInput
  postalCountry: NullableStringFieldUpdateOperationsInput
  postalName: NullableStringFieldUpdateOperationsInput
  postalStreet: NullableStringFieldUpdateOperationsInput
  postalZip: NullableStringFieldUpdateOperationsInput
  startAssignment: DateTimeFieldUpdateOperationsInput
  startConference: DateTimeFieldUpdateOperationsInput
  state: EnumConferenceStateFieldUpdateOperationsInput
  termsAndConditionsContent: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  unlockPayments: BoolFieldUpdateOperationsInput
  unlockPostals: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input ConferenceWhereInput {
  AND: [ConferenceWhereInput!]
  NOT: [ConferenceWhereInput!]
  OR: [ConferenceWhereInput!]
  accountHolder: StringNullableFilter
  bankName: StringNullableFilter
  bic: StringNullableFilter
  committees: CommitteeListRelationFilter
  conferenceSupervisors: ConferenceSupervisorListRelationFilter
  conferenceUserStatus: ConferenceParticipantStatusListRelationFilter
  createdAt: DateTimeFilter
  currency: StringNullableFilter
  delegationMembers: DelegationMemberListRelationFilter
  delegations: DelegationListRelationFilter
  endConference: DateTimeFilter
  feeAmount: FloatNullableFilter
  guardianConsentContent: StringNullableFilter
  iban: StringNullableFilter
  id: StringFilter
  imageDataURL: StringNullableFilter
  individualApplicationOptions: CustomConferenceRoleListRelationFilter
  info: StringNullableFilter
  language: StringNullableFilter
  linkToPreparationGuide: StringNullableFilter
  location: StringNullableFilter
  longTitle: StringNullableFilter
  mediaConsentContent: StringNullableFilter
  nonStateActors: NonStateActorListRelationFilter
  paymentTransactions: PaymentTransactionListRelationFilter
  postalApartment: StringNullableFilter
  postalCity: StringNullableFilter
  postalCountry: StringNullableFilter
  postalName: StringNullableFilter
  postalStreet: StringNullableFilter
  postalZip: StringNullableFilter
  singleParticipants: SingleParticipantListRelationFilter
  startAssignment: DateTimeFilter
  startConference: DateTimeFilter
  state: EnumConferenceStateFilter
  teamMembers: TeamMemberListRelationFilter
  termsAndConditionsContent: StringNullableFilter
  title: StringFilter
  unlockPayments: BoolFilter
  unlockPostals: BoolFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

input ConferenceWhereUniqueInput {
  AND: [ConferenceWhereInput!]
  NOT: [ConferenceWhereInput!]
  OR: [ConferenceWhereInput!]
  accountHolder: StringNullableFilter
  bankName: StringNullableFilter
  bic: StringNullableFilter
  committees: CommitteeListRelationFilter
  conferenceSupervisors: ConferenceSupervisorListRelationFilter
  conferenceUserStatus: ConferenceParticipantStatusListRelationFilter
  createdAt: DateTimeFilter
  currency: StringNullableFilter
  delegationMembers: DelegationMemberListRelationFilter
  delegations: DelegationListRelationFilter
  endConference: DateTimeFilter
  feeAmount: FloatNullableFilter
  guardianConsentContent: StringNullableFilter
  iban: StringNullableFilter
  id: String
  imageDataURL: StringNullableFilter
  individualApplicationOptions: CustomConferenceRoleListRelationFilter
  info: StringNullableFilter
  language: StringNullableFilter
  linkToPreparationGuide: StringNullableFilter
  location: StringNullableFilter
  longTitle: StringNullableFilter
  mediaConsentContent: StringNullableFilter
  nonStateActors: NonStateActorListRelationFilter
  paymentTransactions: PaymentTransactionListRelationFilter
  postalApartment: StringNullableFilter
  postalCity: StringNullableFilter
  postalCountry: StringNullableFilter
  postalName: StringNullableFilter
  postalStreet: StringNullableFilter
  postalZip: StringNullableFilter
  singleParticipants: SingleParticipantListRelationFilter
  startAssignment: DateTimeFilter
  startConference: DateTimeFilter
  state: EnumConferenceStateFilter
  teamMembers: TeamMemberListRelationFilter
  termsAndConditionsContent: StringNullableFilter
  title: StringFilter
  unlockPayments: BoolFilter
  unlockPostals: BoolFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

type CustomConferenceRole {
  conference: Conference!
  description: String!
  fontAwesomeIcon: String
  id: ID!
  name: String!
  singleParticipant: [SingleParticipant!]!
  singleParticipantAssignments: [SingleParticipant!]!
}

input CustomConferenceRoleConferenceIdNameCompoundUniqueInput {
  conferenceId: String!
  name: String!
}

input CustomConferenceRoleCreateInput {
  conferenceId: String!
  createdAt: DateTime
  description: String!
  fontAwesomeIcon: String
  id: String
  name: String!
  singleParticipant: SingleParticipantCreateNestedManyWithoutAppliedForRolesInput
  singleParticipantAssignments: SingleParticipantCreateNestedManyWithoutAssignedRoleInput
  updatedAt: DateTime
}

input CustomConferenceRoleCreateNestedManyWithoutConferenceInput {
  connect: [CustomConferenceRoleWhereUniqueInput!]
}

input CustomConferenceRoleCreateNestedManyWithoutSingleParticipantInput {
  connect: [CustomConferenceRoleWhereUniqueInput!]
}

input CustomConferenceRoleListRelationFilter {
  every: CustomConferenceRoleWhereInput
  none: CustomConferenceRoleWhereInput
  some: CustomConferenceRoleWhereInput
}

input CustomConferenceRoleNullableScalarRelationFilter {
  is: CustomConferenceRoleWhereInput
  isNot: CustomConferenceRoleWhereInput
}

input CustomConferenceRoleOrderByRelationAggregateInput {
  _count: SortOrder
}

input CustomConferenceRoleOrderByWithRelationInput {
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  fontAwesomeIcon: SortOrder
  id: SortOrder
  name: SortOrder
  singleParticipant: SingleParticipantOrderByRelationAggregateInput
  singleParticipantAssignments: SingleParticipantOrderByRelationAggregateInput
  updatedAt: SortOrder
}

enum CustomConferenceRoleScalarFieldEnum {
  conferenceId
  createdAt
  description
  fontAwesomeIcon
  id
  name
  updatedAt
}

input CustomConferenceRoleUpdateInput {
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  fontAwesomeIcon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  singleParticipant: SingleParticipantUpdateManyWithoutAppliedForRolesNestedInput
  singleParticipantAssignments: SingleParticipantUpdateManyWithoutAssignedRoleNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CustomConferenceRoleUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  fontAwesomeIcon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CustomConferenceRoleUpdateManyWithoutConferenceNestedInput {
  connect: [CustomConferenceRoleWhereUniqueInput!]
  disconnect: [CustomConferenceRoleWhereUniqueInput!]
  set: [CustomConferenceRoleWhereUniqueInput!]
}

input CustomConferenceRoleUpdateManyWithoutSingleParticipantNestedInput {
  connect: [CustomConferenceRoleWhereUniqueInput!]
  disconnect: [CustomConferenceRoleWhereUniqueInput!]
  set: [CustomConferenceRoleWhereUniqueInput!]
}

input CustomConferenceRoleWhereInput {
  AND: [CustomConferenceRoleWhereInput!]
  NOT: [CustomConferenceRoleWhereInput!]
  OR: [CustomConferenceRoleWhereInput!]
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  fontAwesomeIcon: StringNullableFilter
  id: StringFilter
  name: StringFilter
  singleParticipant: SingleParticipantListRelationFilter
  singleParticipantAssignments: SingleParticipantListRelationFilter
  updatedAt: DateTimeFilter
}

input CustomConferenceRoleWhereUniqueInput {
  AND: [CustomConferenceRoleWhereInput!]
  NOT: [CustomConferenceRoleWhereInput!]
  OR: [CustomConferenceRoleWhereInput!]
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  conferenceId_name: CustomConferenceRoleConferenceIdNameCompoundUniqueInput
  createdAt: DateTimeFilter
  description: StringFilter
  fontAwesomeIcon: StringNullableFilter
  id: String
  name: StringFilter
  singleParticipant: SingleParticipantListRelationFilter
  singleParticipantAssignments: SingleParticipantListRelationFilter
  updatedAt: DateTimeFilter
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

"""A group application. Holds multiple members."""
type Delegation {
  """
  wether the delegation has submitted their application
  after submitting the entity should not be able to change
  """
  applied: Boolean!
  appliedForRoles: [RoleApplication!]!
  assignedNation: Nation
  assignedNonStateActor: NonStateActor
  conference: Conference!
  entryCode: String!
  experience: String
  id: ID!
  members: [DelegationMember!]!
  motivation: String
  school: String
  supervisors: [ConferenceSupervisor!]!
}

input DelegationConferenceIdAssignedNationAlpha3CodeCompoundUniqueInput {
  assignedNationAlpha3Code: String!
  conferenceId: String!
}

input DelegationConferenceIdAssignedNonStateActorIdCompoundUniqueInput {
  assignedNonStateActorId: String!
  conferenceId: String!
}

input DelegationConferenceIdEntryCodeCompoundUniqueInput {
  conferenceId: String!
  entryCode: String!
}

input DelegationCreateInput {
  applied: Boolean
  appliedForRoles: RoleApplicationCreateNestedManyWithoutDelegationInput
  assignedNationAlpha3Code: String
  assignedNonStateActorId: String
  conferenceId: String!
  createdAt: DateTime
  entryCode: String!
  experience: String
  id: String
  members: DelegationMemberCreateNestedManyWithoutDelegationInput
  motivation: String
  school: String
  supervisors: ConferenceSupervisorCreateNestedManyWithoutDelegationsInput
  updatedAt: DateTime
}

input DelegationCreateNestedManyWithoutAssignedNationInput {
  connect: [DelegationWhereUniqueInput!]
}

input DelegationCreateNestedManyWithoutAssignedNonStateActorInput {
  connect: [DelegationWhereUniqueInput!]
}

input DelegationCreateNestedManyWithoutConferenceInput {
  connect: [DelegationWhereUniqueInput!]
}

input DelegationCreateNestedManyWithoutSupervisorsInput {
  connect: [DelegationWhereUniqueInput!]
}

input DelegationListRelationFilter {
  every: DelegationWhereInput
  none: DelegationWhereInput
  some: DelegationWhereInput
}

"""Member in a delegation"""
type DelegationMember {
  assignedCommittee: Committee
  conference: Conference!
  delegation: Delegation!
  id: ID!
  isHeadDelegate: Boolean!
  user: User!
}

input DelegationMemberConferenceIdUserIdCompoundUniqueInput {
  conferenceId: String!
  userId: String!
}

input DelegationMemberCreateInput {
  assignedCommitteeId: String
  conferenceId: String!
  createdAt: DateTime
  delegationId: String!
  id: String
  isHeadDelegate: Boolean!
  postAssignmentConferenceSupervisors: ConferenceSupervisorCreateNestedManyWithoutPostAssignmentDelegeationMembersInput
  updatedAt: DateTime
  userId: String!
}

input DelegationMemberCreateNestedManyWithoutAssignedCommitteeInput {
  connect: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberCreateNestedManyWithoutConferenceInput {
  connect: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberCreateNestedManyWithoutDelegationInput {
  connect: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberCreateNestedManyWithoutPostAssignmentConferenceSupervisorsInput {
  connect: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberCreateNestedManyWithoutUserInput {
  connect: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberDelegationIdUserIdCompoundUniqueInput {
  delegationId: String!
  userId: String!
}

input DelegationMemberListRelationFilter {
  every: DelegationMemberWhereInput
  none: DelegationMemberWhereInput
  some: DelegationMemberWhereInput
}

input DelegationMemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input DelegationMemberOrderByWithRelationInput {
  assignedCommittee: CommitteeOrderByWithRelationInput
  assignedCommitteeId: SortOrder
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  delegation: DelegationOrderByWithRelationInput
  delegationId: SortOrder
  id: SortOrder
  isHeadDelegate: SortOrder
  postAssignmentConferenceSupervisors: ConferenceSupervisorOrderByRelationAggregateInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum DelegationMemberScalarFieldEnum {
  assignedCommitteeId
  conferenceId
  createdAt
  delegationId
  id
  isHeadDelegate
  updatedAt
  userId
}

input DelegationMemberUpdateInput {
  assignedCommitteeId: NullableStringFieldUpdateOperationsInput
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  delegationId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isHeadDelegate: BoolFieldUpdateOperationsInput
  postAssignmentConferenceSupervisors: ConferenceSupervisorUpdateManyWithoutPostAssignmentDelegeationMembersNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input DelegationMemberUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isHeadDelegate: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DelegationMemberUpdateManyWithoutAssignedCommitteeNestedInput {
  connect: [DelegationMemberWhereUniqueInput!]
  disconnect: [DelegationMemberWhereUniqueInput!]
  set: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberUpdateManyWithoutConferenceNestedInput {
  connect: [DelegationMemberWhereUniqueInput!]
  disconnect: [DelegationMemberWhereUniqueInput!]
  set: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberUpdateManyWithoutDelegationNestedInput {
  connect: [DelegationMemberWhereUniqueInput!]
  disconnect: [DelegationMemberWhereUniqueInput!]
  set: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberUpdateManyWithoutPostAssignmentConferenceSupervisorsNestedInput {
  connect: [DelegationMemberWhereUniqueInput!]
  disconnect: [DelegationMemberWhereUniqueInput!]
  set: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberUpdateManyWithoutUserNestedInput {
  connect: [DelegationMemberWhereUniqueInput!]
  disconnect: [DelegationMemberWhereUniqueInput!]
  set: [DelegationMemberWhereUniqueInput!]
}

input DelegationMemberWhereInput {
  AND: [DelegationMemberWhereInput!]
  NOT: [DelegationMemberWhereInput!]
  OR: [DelegationMemberWhereInput!]
  assignedCommittee: CommitteeWhereInput
  assignedCommitteeId: StringNullableFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  delegation: DelegationWhereInput
  delegationId: StringFilter
  id: StringFilter
  isHeadDelegate: BoolFilter
  postAssignmentConferenceSupervisors: ConferenceSupervisorListRelationFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input DelegationMemberWhereUniqueInput {
  AND: [DelegationMemberWhereInput!]
  NOT: [DelegationMemberWhereInput!]
  OR: [DelegationMemberWhereInput!]
  assignedCommittee: CommitteeWhereInput
  assignedCommitteeId: StringNullableFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  conferenceId_userId: DelegationMemberConferenceIdUserIdCompoundUniqueInput
  createdAt: DateTimeFilter
  delegation: DelegationWhereInput
  delegationId: StringFilter
  delegationId_userId: DelegationMemberDelegationIdUserIdCompoundUniqueInput
  id: String
  isHeadDelegate: BoolFilter
  postAssignmentConferenceSupervisors: ConferenceSupervisorListRelationFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input DelegationOrderByRelationAggregateInput {
  _count: SortOrder
}

input DelegationOrderByWithRelationInput {
  applied: SortOrder
  appliedForRoles: RoleApplicationOrderByRelationAggregateInput
  assignedNation: NationOrderByWithRelationInput
  assignedNationAlpha3Code: SortOrder
  assignedNonStateActor: NonStateActorOrderByWithRelationInput
  assignedNonStateActorId: SortOrder
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  entryCode: SortOrder
  experience: SortOrder
  id: SortOrder
  members: DelegationMemberOrderByRelationAggregateInput
  motivation: SortOrder
  school: SortOrder
  supervisors: ConferenceSupervisorOrderByRelationAggregateInput
  updatedAt: SortOrder
}

type DelegationPreview {
  applied: Boolean!
  conferenceId: String!
  conferenceTitle: String!
  entryCode: String!
  experience: String
  headDelegateFullName: String!
  id: String!
  memberCount: Int!
  motivation: String
  school: String
}

enum DelegationScalarFieldEnum {
  applied
  assignedNationAlpha3Code
  assignedNonStateActorId
  conferenceId
  createdAt
  entryCode
  experience
  id
  motivation
  school
  updatedAt
}

input DelegationScalarRelationFilter {
  is: DelegationWhereInput
  isNot: DelegationWhereInput
}

input DelegationUpdateInput {
  applied: BoolFieldUpdateOperationsInput
  appliedForRoles: RoleApplicationUpdateManyWithoutDelegationNestedInput
  assignedNationAlpha3Code: NullableStringFieldUpdateOperationsInput
  assignedNonStateActorId: NullableStringFieldUpdateOperationsInput
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  entryCode: StringFieldUpdateOperationsInput
  experience: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  members: DelegationMemberUpdateManyWithoutDelegationNestedInput
  motivation: NullableStringFieldUpdateOperationsInput
  school: NullableStringFieldUpdateOperationsInput
  supervisors: ConferenceSupervisorUpdateManyWithoutDelegationsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DelegationUpdateManyMutationInput {
  applied: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  entryCode: StringFieldUpdateOperationsInput
  experience: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  motivation: NullableStringFieldUpdateOperationsInput
  school: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DelegationUpdateManyWithoutAssignedNationNestedInput {
  connect: [DelegationWhereUniqueInput!]
  disconnect: [DelegationWhereUniqueInput!]
  set: [DelegationWhereUniqueInput!]
}

input DelegationUpdateManyWithoutAssignedNonStateActorNestedInput {
  connect: [DelegationWhereUniqueInput!]
  disconnect: [DelegationWhereUniqueInput!]
  set: [DelegationWhereUniqueInput!]
}

input DelegationUpdateManyWithoutConferenceNestedInput {
  connect: [DelegationWhereUniqueInput!]
  disconnect: [DelegationWhereUniqueInput!]
  set: [DelegationWhereUniqueInput!]
}

input DelegationUpdateManyWithoutSupervisorsNestedInput {
  connect: [DelegationWhereUniqueInput!]
  disconnect: [DelegationWhereUniqueInput!]
  set: [DelegationWhereUniqueInput!]
}

input DelegationWhereInput {
  AND: [DelegationWhereInput!]
  NOT: [DelegationWhereInput!]
  OR: [DelegationWhereInput!]
  applied: BoolFilter
  appliedForRoles: RoleApplicationListRelationFilter
  assignedNation: NationWhereInput
  assignedNationAlpha3Code: StringNullableFilter
  assignedNonStateActor: NonStateActorWhereInput
  assignedNonStateActorId: StringNullableFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  entryCode: StringFilter
  experience: StringNullableFilter
  id: StringFilter
  members: DelegationMemberListRelationFilter
  motivation: StringNullableFilter
  school: StringNullableFilter
  supervisors: ConferenceSupervisorListRelationFilter
  updatedAt: DateTimeFilter
}

input DelegationWhereUniqueInput {
  AND: [DelegationWhereInput!]
  NOT: [DelegationWhereInput!]
  OR: [DelegationWhereInput!]
  applied: BoolFilter
  appliedForRoles: RoleApplicationListRelationFilter
  assignedNation: NationWhereInput
  assignedNationAlpha3Code: StringNullableFilter
  assignedNonStateActor: NonStateActorWhereInput
  assignedNonStateActorId: StringNullableFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  conferenceId_assignedNationAlpha3Code: DelegationConferenceIdAssignedNationAlpha3CodeCompoundUniqueInput
  conferenceId_assignedNonStateActorId: DelegationConferenceIdAssignedNonStateActorIdCompoundUniqueInput
  conferenceId_entryCode: DelegationConferenceIdEntryCodeCompoundUniqueInput
  createdAt: DateTimeFilter
  entryCode: StringFilter
  experience: StringNullableFilter
  id: String
  members: DelegationMemberListRelationFilter
  motivation: StringNullableFilter
  school: StringNullableFilter
  supervisors: ConferenceSupervisorListRelationFilter
  updatedAt: DateTimeFilter
}

input EnumAdministrativeStatusFieldUpdateOperationsInput {
  set: AdministrativeStatus
}

input EnumAdministrativeStatusFilter {
  equals: AdministrativeStatus
  in: [AdministrativeStatus!]
  not: AdministrativeStatus
  notIn: [AdministrativeStatus!]
}

input EnumAdministrativeStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAdministrativeStatusFilter
  _min: NestedEnumAdministrativeStatusFilter
  equals: AdministrativeStatus
  in: [AdministrativeStatus!]
  not: AdministrativeStatus
  notIn: [AdministrativeStatus!]
}

input EnumConferenceStateFieldUpdateOperationsInput {
  set: ConferenceState
}

input EnumConferenceStateFilter {
  equals: ConferenceState
  in: [ConferenceState!]
  not: ConferenceState
  notIn: [ConferenceState!]
}

input EnumConferenceStateWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumConferenceStateFilter
  _min: NestedEnumConferenceStateFilter
  equals: ConferenceState
  in: [ConferenceState!]
  not: ConferenceState
  notIn: [ConferenceState!]
}

input EnumFoodPreferenceNullableFilter {
  equals: FoodPreference
  in: [FoodPreference!]
  not: FoodPreference
  notIn: [FoodPreference!]
}

input EnumFoodPreferenceNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumFoodPreferenceNullableFilter
  _min: NestedEnumFoodPreferenceNullableFilter
  equals: FoodPreference
  in: [FoodPreference!]
  not: FoodPreference
  notIn: [FoodPreference!]
}

input EnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: Gender
  notIn: [Gender!]
}

input EnumGenderNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumGenderNullableFilter
  _min: NestedEnumGenderNullableFilter
  equals: Gender
  in: [Gender!]
  not: Gender
  notIn: [Gender!]
}

input EnumTeamRoleFieldUpdateOperationsInput {
  set: TeamRole
}

input EnumTeamRoleFilter {
  equals: TeamRole
  in: [TeamRole!]
  not: TeamRole
  notIn: [TeamRole!]
}

input EnumTeamRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTeamRoleFilter
  _min: NestedEnumTeamRoleFilter
  equals: TeamRole
  in: [TeamRole!]
  not: TeamRole
  notIn: [TeamRole!]
}

scalar File

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input FloatNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedFloatNullableFilter
  _min: NestedFloatNullableFilter
  _sum: NestedFloatNullableFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableWithAggregatesFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

enum FoodPreference {
  OMNIVORE
  VEGAN
  VEGETARIAN
}

enum Gender {
  DIVERSE
  FEMALE
  MALE
  NO_STATEMENT
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

scalar JSONObject

type Mutation {
  assignCommitteesToDelegationMembers(assignments: [updateManyDelegationMemberInputTypeArrayValue!]!): [DelegationMember!]!
  createOneDelegation(conferenceId: ID!, experience: String, motivation: String, school: String): Delegation!
  createOneDelegationMember(conferenceId: ID!, entryCode: String!): DelegationMember!
  createOnePaymentTransaction(conferenceId: ID!, paymentFor: [ID!]!, userId: ID!): PaymentTransaction!
  createOneRoleApplication(delegationId: ID!, nationId: ID, nonStateActorId: ID): RoleApplication!
  createOneSingleParticipant(conferenceId: ID!, experience: String, motivation: String, roleId: ID!, school: String): SingleParticipant!
  deleteDeadDelegationMembers(conferenceId: ID!): [DelegationMember!]!
  deleteDeadSingleParticipants(conferenceId: ID!): [SingleParticipant!]!
  deleteDeadSupervisors(conferenceId: ID!): [ConferenceSupervisor!]!
  deleteEmptyDelegations(conferenceId: ID!): [Delegation!]!
  deleteOneCommittee(where: CommitteeWhereUniqueInput!): Committee
  deleteOneConference(where: ConferenceWhereUniqueInput!): Conference
  deleteOneConferenceParticipantStatus(where: ConferenceParticipantStatusWhereUniqueInput!): ConferenceParticipantStatus
  deleteOneConferenceSupervisor(where: ConferenceSupervisorWhereUniqueInput!): ConferenceSupervisor
  deleteOneCustomConferenceRole(where: CustomConferenceRoleWhereUniqueInput!): CustomConferenceRole
  deleteOneDelegation(where: DelegationWhereUniqueInput!): Delegation
  deleteOneDelegationMember(where: DelegationMemberWhereUniqueInput!): DelegationMember
  deleteOneNation(where: NationWhereUniqueInput!): Nation
  deleteOneNonStateActor(where: NonStateActorWhereUniqueInput!): NonStateActor
  deleteOneRoleApplication(where: RoleApplicationWhereUniqueInput!): RoleApplication
  deleteOneSingleParticipant(where: SingleParticipantWhereUniqueInput!): SingleParticipant
  deleteOneTeamMember(where: TeamMemberWhereUniqueInput!): TeamMember
  deleteOneUser(where: UserWhereUniqueInput!): User
  sendAssignmentData(data: JSONObject!, where: ConferenceWhereUniqueInput!): SetAssignmentDataResult!
  swapRoleApplicationRanks(firstRoleApplicationId: ID!, secondRoleApplicationId: ID!): RoleApplicationRankSwapResult!
  unregisterParticipant(conferenceId: ID!, userId: ID!): User!
  updateOneConference(data: ConferenceUpdateDataInput!, where: ConferenceWhereUniqueInput!): Conference
  updateOneConferenceParticipantStatus(data: UpdateConferenceParticipantStatusInput!, where: ConferenceParticipantStatusWhereUniqueInputNotRequired!): ConferenceParticipantStatus
  updateOneConferenceSupervisor(data: ConferenceSupervisorUpdateDataInput!, where: ConferenceSupervisorWhereUniqueInput!): ConferenceSupervisor
  updateOneCustomConferenceRole(data: CustomConferenceRoleUpdateInput!, where: CustomConferenceRoleWhereUniqueInput!): CustomConferenceRole
  updateOneDelegation(applied: Boolean, experience: String, motivation: String, newHeadDelegateUserId: ID, resetEntryCode: Boolean, school: String, where: DelegationWhereUniqueInput!): Delegation
  updateOnePaymentTransaction(assignedStatus: AdministrativeStatus!, id: ID!, recievedAt: DateTime): PaymentTransaction
  updateOneSingleParticipant(applied: Boolean, applyForRolesIdList: [ID!], experience: String, motivation: String, school: String, unApplyForRolesIdList: [ID!], where: SingleParticipantWhereUniqueInput!): SingleParticipant
  updateOneUser(data: UserUpdateDataInput!, where: UserWhereUniqueInput!): User
  upsertOneConferenceSupervisor(conferenceId: ID!, entryCode: String!): ConferenceSupervisor!
  upsertSelf: UpsertSelfResult!
}

"""A nation of the UN. Mostly gets seeded at application startup"""
type Nation {
  alpha2Code: String!
  alpha3Code: ID!
  committees: [Committee!]!
  roleApplications: [RoleApplication!]!
}

input NationCreateInput {
  alpha2Code: String!
  alpha3Code: String!
  assignedDelegations: DelegationCreateNestedManyWithoutAssignedNationInput
  committees: CommitteeCreateNestedManyWithoutNationsInput
  createdAt: DateTime
  roleApplications: RoleApplicationCreateNestedManyWithoutNationInput
  updatedAt: DateTime
}

input NationCreateNestedManyWithoutCommitteesInput {
  connect: [NationWhereUniqueInput!]
}

input NationListRelationFilter {
  every: NationWhereInput
  none: NationWhereInput
  some: NationWhereInput
}

input NationNullableScalarRelationFilter {
  is: NationWhereInput
  isNot: NationWhereInput
}

input NationOrderByRelationAggregateInput {
  _count: SortOrder
}

input NationOrderByWithRelationInput {
  alpha2Code: SortOrder
  alpha3Code: SortOrder
  assignedDelegations: DelegationOrderByRelationAggregateInput
  committees: CommitteeOrderByRelationAggregateInput
  createdAt: SortOrder
  roleApplications: RoleApplicationOrderByRelationAggregateInput
  updatedAt: SortOrder
}

enum NationScalarFieldEnum {
  alpha2Code
  alpha3Code
  createdAt
  updatedAt
}

input NationUpdateInput {
  alpha2Code: StringFieldUpdateOperationsInput
  alpha3Code: StringFieldUpdateOperationsInput
  assignedDelegations: DelegationUpdateManyWithoutAssignedNationNestedInput
  committees: CommitteeUpdateManyWithoutNationsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  roleApplications: RoleApplicationUpdateManyWithoutNationNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NationUpdateManyMutationInput {
  alpha2Code: StringFieldUpdateOperationsInput
  alpha3Code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NationUpdateManyWithoutCommitteesNestedInput {
  connect: [NationWhereUniqueInput!]
  disconnect: [NationWhereUniqueInput!]
  set: [NationWhereUniqueInput!]
}

input NationWhereInput {
  AND: [NationWhereInput!]
  NOT: [NationWhereInput!]
  OR: [NationWhereInput!]
  alpha2Code: StringFilter
  alpha3Code: StringFilter
  assignedDelegations: DelegationListRelationFilter
  committees: CommitteeListRelationFilter
  createdAt: DateTimeFilter
  roleApplications: RoleApplicationListRelationFilter
  updatedAt: DateTimeFilter
}

input NationWhereUniqueInput {
  AND: [NationWhereInput!]
  NOT: [NationWhereInput!]
  OR: [NationWhereInput!]
  alpha2Code: String
  alpha3Code: String
  assignedDelegations: DelegationListRelationFilter
  committees: CommitteeListRelationFilter
  createdAt: DateTimeFilter
  roleApplications: RoleApplicationListRelationFilter
  updatedAt: DateTimeFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumAdministrativeStatusFilter {
  equals: AdministrativeStatus
  in: [AdministrativeStatus!]
  not: AdministrativeStatus
  notIn: [AdministrativeStatus!]
}

input NestedEnumAdministrativeStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAdministrativeStatusFilter
  _min: NestedEnumAdministrativeStatusFilter
  equals: AdministrativeStatus
  in: [AdministrativeStatus!]
  not: AdministrativeStatus
  notIn: [AdministrativeStatus!]
}

input NestedEnumConferenceStateFilter {
  equals: ConferenceState
  in: [ConferenceState!]
  not: ConferenceState
  notIn: [ConferenceState!]
}

input NestedEnumConferenceStateWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumConferenceStateFilter
  _min: NestedEnumConferenceStateFilter
  equals: ConferenceState
  in: [ConferenceState!]
  not: ConferenceState
  notIn: [ConferenceState!]
}

input NestedEnumFoodPreferenceNullableFilter {
  equals: FoodPreference
  in: [FoodPreference!]
  not: FoodPreference
  notIn: [FoodPreference!]
}

input NestedEnumFoodPreferenceNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumFoodPreferenceNullableFilter
  _min: NestedEnumFoodPreferenceNullableFilter
  equals: FoodPreference
  in: [FoodPreference!]
  not: FoodPreference
  notIn: [FoodPreference!]
}

input NestedEnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: Gender
  notIn: [Gender!]
}

input NestedEnumGenderNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumGenderNullableFilter
  _min: NestedEnumGenderNullableFilter
  equals: Gender
  in: [Gender!]
  not: Gender
  notIn: [Gender!]
}

input NestedEnumTeamRoleFilter {
  equals: TeamRole
  in: [TeamRole!]
  not: TeamRole
  notIn: [TeamRole!]
}

input NestedEnumTeamRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTeamRoleFilter
  _min: NestedEnumTeamRoleFilter
  equals: TeamRole
  in: [TeamRole!]
  not: TeamRole
  notIn: [TeamRole!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedFloatNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedFloatNullableFilter
  _min: NestedFloatNullableFilter
  _sum: NestedFloatNullableFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableWithAggregatesFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

"""
Conferences can create custom non state actors which can be selected as roles in applications
"""
type NonStateActor {
  abbreviation: String!
  conference: Conference!
  description: String!
  fontAwesomeIcon: String
  id: ID!
  name: String!
  roleApplications: [RoleApplication!]!
  seatAmount: Int!
}

input NonStateActorConferenceIdAbbreviationCompoundUniqueInput {
  abbreviation: String!
  conferenceId: String!
}

input NonStateActorConferenceIdNameCompoundUniqueInput {
  conferenceId: String!
  name: String!
}

input NonStateActorCreateInput {
  abbreviation: String!
  assignedDelegations: DelegationCreateNestedManyWithoutAssignedNonStateActorInput
  conferenceId: String!
  createdAt: DateTime
  description: String!
  fontAwesomeIcon: String
  id: String
  name: String!
  roleApplications: RoleApplicationCreateNestedManyWithoutNonStateActorInput
  seatAmount: Int
  updatedAt: DateTime
}

input NonStateActorCreateNestedManyWithoutConferenceInput {
  connect: [NonStateActorWhereUniqueInput!]
}

input NonStateActorListRelationFilter {
  every: NonStateActorWhereInput
  none: NonStateActorWhereInput
  some: NonStateActorWhereInput
}

input NonStateActorNullableScalarRelationFilter {
  is: NonStateActorWhereInput
  isNot: NonStateActorWhereInput
}

input NonStateActorOrderByRelationAggregateInput {
  _count: SortOrder
}

input NonStateActorOrderByWithRelationInput {
  abbreviation: SortOrder
  assignedDelegations: DelegationOrderByRelationAggregateInput
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  fontAwesomeIcon: SortOrder
  id: SortOrder
  name: SortOrder
  roleApplications: RoleApplicationOrderByRelationAggregateInput
  seatAmount: SortOrder
  updatedAt: SortOrder
}

enum NonStateActorScalarFieldEnum {
  abbreviation
  conferenceId
  createdAt
  description
  fontAwesomeIcon
  id
  name
  seatAmount
  updatedAt
}

input NonStateActorUpdateInput {
  abbreviation: StringFieldUpdateOperationsInput
  assignedDelegations: DelegationUpdateManyWithoutAssignedNonStateActorNestedInput
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  fontAwesomeIcon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  roleApplications: RoleApplicationUpdateManyWithoutNonStateActorNestedInput
  seatAmount: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NonStateActorUpdateManyMutationInput {
  abbreviation: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  fontAwesomeIcon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  seatAmount: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NonStateActorUpdateManyWithoutConferenceNestedInput {
  connect: [NonStateActorWhereUniqueInput!]
  disconnect: [NonStateActorWhereUniqueInput!]
  set: [NonStateActorWhereUniqueInput!]
}

input NonStateActorWhereInput {
  AND: [NonStateActorWhereInput!]
  NOT: [NonStateActorWhereInput!]
  OR: [NonStateActorWhereInput!]
  abbreviation: StringFilter
  assignedDelegations: DelegationListRelationFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  fontAwesomeIcon: StringNullableFilter
  id: StringFilter
  name: StringFilter
  roleApplications: RoleApplicationListRelationFilter
  seatAmount: IntFilter
  updatedAt: DateTimeFilter
}

input NonStateActorWhereUniqueInput {
  AND: [NonStateActorWhereInput!]
  NOT: [NonStateActorWhereInput!]
  OR: [NonStateActorWhereInput!]
  abbreviation: StringFilter
  assignedDelegations: DelegationListRelationFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  conferenceId_abbreviation: NonStateActorConferenceIdAbbreviationCompoundUniqueInput
  conferenceId_name: NonStateActorConferenceIdNameCompoundUniqueInput
  createdAt: DateTimeFilter
  description: StringFilter
  fontAwesomeIcon: StringNullableFilter
  id: String
  name: StringFilter
  roleApplications: RoleApplicationListRelationFilter
  seatAmount: IntFilter
  updatedAt: DateTimeFilter
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumFoodPreferenceFieldUpdateOperationsInput {
  set: FoodPreference
}

input NullableEnumGenderFieldUpdateOperationsInput {
  set: Gender
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

enum OIDCRolesEnum {
  admin
  member
  service_user
}

type OfflineUser {
  email: String!
  family_name: String!
  given_name: String!
  locale: String
  phone: String
  preferred_username: String!
  sub: String!
}

type OfflineUserRefresh {
  nextTokenRefreshDue: DateTime
  user: OfflineUser
}

"""
The transactions used to reference the payment status of various users in the conference
"""
type PaymentTransaction {
  amount: Float!
  conference: Conference!
  createdAt: DateTime!

  """
  do not use nanoid here since we need an id that is suitable for the reason field in SEPA transaction
  """
  id: ID!
  recievedAt: DateTime
  user: User!
}

input PaymentTransactionCreateInput {
  amount: Float!
  conferenceId: String!
  createdAt: DateTime
  id: String!
  paymentFor: UserReferenceInPaymentTransactionCreateNestedManyWithoutPaymentTransactionInput
  recievedAt: DateTime
  updatedAt: DateTime
  userId: String!
}

input PaymentTransactionCreateNestedManyWithoutConferenceInput {
  connect: [PaymentTransactionWhereUniqueInput!]
}

input PaymentTransactionCreateNestedManyWithoutUserInput {
  connect: [PaymentTransactionWhereUniqueInput!]
}

input PaymentTransactionListRelationFilter {
  every: PaymentTransactionWhereInput
  none: PaymentTransactionWhereInput
  some: PaymentTransactionWhereInput
}

input PaymentTransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input PaymentTransactionOrderByWithRelationInput {
  amount: SortOrder
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  paymentFor: UserReferenceInPaymentTransactionOrderByRelationAggregateInput
  recievedAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum PaymentTransactionScalarFieldEnum {
  amount
  conferenceId
  createdAt
  id
  recievedAt
  updatedAt
  userId
}

input PaymentTransactionScalarRelationFilter {
  is: PaymentTransactionWhereInput
  isNot: PaymentTransactionWhereInput
}

input PaymentTransactionUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  paymentFor: UserReferenceInPaymentTransactionUpdateManyWithoutPaymentTransactionNestedInput
  recievedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input PaymentTransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  recievedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentTransactionUpdateManyWithoutConferenceNestedInput {
  connect: [PaymentTransactionWhereUniqueInput!]
  disconnect: [PaymentTransactionWhereUniqueInput!]
  set: [PaymentTransactionWhereUniqueInput!]
}

input PaymentTransactionUpdateManyWithoutUserNestedInput {
  connect: [PaymentTransactionWhereUniqueInput!]
  disconnect: [PaymentTransactionWhereUniqueInput!]
  set: [PaymentTransactionWhereUniqueInput!]
}

input PaymentTransactionWhereInput {
  AND: [PaymentTransactionWhereInput!]
  NOT: [PaymentTransactionWhereInput!]
  OR: [PaymentTransactionWhereInput!]
  amount: FloatFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  paymentFor: UserReferenceInPaymentTransactionListRelationFilter
  recievedAt: DateTimeNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input PaymentTransactionWhereUniqueInput {
  AND: [PaymentTransactionWhereInput!]
  NOT: [PaymentTransactionWhereInput!]
  OR: [PaymentTransactionWhereInput!]
  amount: FloatFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  id: String
  paymentFor: UserReferenceInPaymentTransactionListRelationFilter
  recievedAt: DateTimeNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type PlausibilityResult {
  dataMissing: [User!]!
  shouldBeSupervisor: [User!]!
  shouldNotBeSupervisor: [User!]!
  tooOldUsers: [User!]!
  tooYoungUsers: [User!]!
}

type Query {
  conferencePlausibility(conferenceId: String!): PlausibilityResult!
  findManyCommittees(cursor: CommitteeWhereUniqueInput, distinct: [CommitteeScalarFieldEnum!], orderBy: [CommitteeOrderByWithRelationInput!], skip: Int, take: Int, where: CommitteeWhereInput): [Committee!]!
  findManyConferenceParticipantStatuss(cursor: ConferenceParticipantStatusWhereUniqueInput, distinct: [ConferenceParticipantStatusScalarFieldEnum!], orderBy: [ConferenceParticipantStatusOrderByWithRelationInput!], skip: Int, take: Int, where: ConferenceParticipantStatusWhereInput): [ConferenceParticipantStatus!]!
  findManyConferenceSupervisors(cursor: ConferenceSupervisorWhereUniqueInput, distinct: [ConferenceSupervisorScalarFieldEnum!], orderBy: [ConferenceSupervisorOrderByWithRelationInput!], skip: Int, take: Int, where: ConferenceSupervisorWhereInput): [ConferenceSupervisor!]!
  findManyConferences(cursor: ConferenceWhereUniqueInput, distinct: [ConferenceScalarFieldEnum!], orderBy: [ConferenceOrderByWithRelationInput!], skip: Int, take: Int, where: ConferenceWhereInput): [Conference!]!
  findManyCustomConferenceRoles(cursor: CustomConferenceRoleWhereUniqueInput, distinct: [CustomConferenceRoleScalarFieldEnum!], orderBy: [CustomConferenceRoleOrderByWithRelationInput!], skip: Int, take: Int, where: CustomConferenceRoleWhereInput): [CustomConferenceRole!]!
  findManyDelegationMembers(cursor: DelegationMemberWhereUniqueInput, distinct: [DelegationMemberScalarFieldEnum!], orderBy: [DelegationMemberOrderByWithRelationInput!], skip: Int, take: Int, where: DelegationMemberWhereInput): [DelegationMember!]!
  findManyDelegations(cursor: DelegationWhereUniqueInput, distinct: [DelegationScalarFieldEnum!], orderBy: [DelegationOrderByWithRelationInput!], skip: Int, take: Int, where: DelegationWhereInput): [Delegation!]!
  findManyNations(cursor: NationWhereUniqueInput, distinct: [NationScalarFieldEnum!], orderBy: [NationOrderByWithRelationInput!], skip: Int, take: Int, where: NationWhereInput): [Nation!]!
  findManyNonStateActors(cursor: NonStateActorWhereUniqueInput, distinct: [NonStateActorScalarFieldEnum!], orderBy: [NonStateActorOrderByWithRelationInput!], skip: Int, take: Int, where: NonStateActorWhereInput): [NonStateActor!]!
  findManyPaymentTransactions(cursor: PaymentTransactionWhereUniqueInput, distinct: [PaymentTransactionScalarFieldEnum!], orderBy: [PaymentTransactionOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentTransactionWhereInput): [PaymentTransaction!]!
  findManyRoleApplications(cursor: RoleApplicationWhereUniqueInput, distinct: [RoleApplicationScalarFieldEnum!], orderBy: [RoleApplicationOrderByWithRelationInput!], skip: Int, take: Int, where: RoleApplicationWhereInput): [RoleApplication!]!
  findManySingleParticipants(cursor: SingleParticipantWhereUniqueInput, distinct: [SingleParticipantScalarFieldEnum!], orderBy: [SingleParticipantOrderByWithRelationInput!], skip: Int, take: Int, where: SingleParticipantWhereInput): [SingleParticipant!]!
  findManyTeamMembers(cursor: TeamMemberWhereUniqueInput, distinct: [TeamMemberScalarFieldEnum!], orderBy: [TeamMemberOrderByWithRelationInput!], skip: Int, take: Int, where: TeamMemberWhereInput): [TeamMember!]!
  findManyUsers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findUniqueCommittee(where: CommitteeWhereUniqueInput!): Committee
  findUniqueConference(where: ConferenceWhereUniqueInput!): Conference
  findUniqueConferenceParticipantStatus(where: ConferenceParticipantStatusWhereUniqueInput!): ConferenceParticipantStatus
  findUniqueConferenceSupervisor(where: ConferenceSupervisorWhereUniqueInput!): ConferenceSupervisor
  findUniqueCustomConferenceRole(where: CustomConferenceRoleWhereUniqueInput!): CustomConferenceRole
  findUniqueDelegation(where: DelegationWhereUniqueInput!): Delegation
  findUniqueDelegationMember(where: DelegationMemberWhereUniqueInput!): DelegationMember
  findUniqueNation(where: NationWhereUniqueInput!): Nation
  findUniqueNonStateActor(where: NonStateActorWhereUniqueInput!): NonStateActor
  findUniquePaymentTransaction(where: PaymentTransactionWhereUniqueInput!): PaymentTransaction
  findUniqueRoleApplication(where: RoleApplicationWhereUniqueInput!): RoleApplication
  findUniqueSingleParticipant(where: SingleParticipantWhereUniqueInput!): SingleParticipant
  findUniqueTeamMember(where: TeamMemberWhereUniqueInput!): TeamMember
  findUniqueUser(where: UserWhereUniqueInput!): User
  getConferenceStatistics(conferenceId: ID!): StatisticsResult!
  logoutUrl: String!
  myOIDCRoles: [OIDCRolesEnum!]!
  offlineUserRefresh: OfflineUserRefresh!
  previewDelegation(conferenceId: String!, entryCode: String!): DelegationPreview!
}

enum QueryMode {
  default
  insensitive
}

"""
Instance of a delegation application selection. When a delegation wants a role they create this entity.
"""
type RoleApplication {
  delegation: Delegation!
  id: ID!
  nation: Nation
  nonStateActor: NonStateActor
  rank: Int!
}

input RoleApplicationCreateInput {
  createdAt: DateTime
  delegationId: String!
  id: String
  nationId: String
  nonStateActorId: String
  rank: Int!
  updatedAt: DateTime
}

input RoleApplicationCreateNestedManyWithoutDelegationInput {
  connect: [RoleApplicationWhereUniqueInput!]
}

input RoleApplicationCreateNestedManyWithoutNationInput {
  connect: [RoleApplicationWhereUniqueInput!]
}

input RoleApplicationCreateNestedManyWithoutNonStateActorInput {
  connect: [RoleApplicationWhereUniqueInput!]
}

input RoleApplicationDelegationIdNationIdCompoundUniqueInput {
  delegationId: String!
  nationId: String!
}

input RoleApplicationDelegationIdNonStateActorIdCompoundUniqueInput {
  delegationId: String!
  nonStateActorId: String!
}

input RoleApplicationDelegationIdRankCompoundUniqueInput {
  delegationId: String!
  rank: Int!
}

input RoleApplicationListRelationFilter {
  every: RoleApplicationWhereInput
  none: RoleApplicationWhereInput
  some: RoleApplicationWhereInput
}

input RoleApplicationOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoleApplicationOrderByWithRelationInput {
  createdAt: SortOrder
  delegation: DelegationOrderByWithRelationInput
  delegationId: SortOrder
  id: SortOrder
  nation: NationOrderByWithRelationInput
  nationId: SortOrder
  nonStateActor: NonStateActorOrderByWithRelationInput
  nonStateActorId: SortOrder
  rank: SortOrder
  updatedAt: SortOrder
}

type RoleApplicationRankSwapResult {
  firstRoleApplication: RoleApplication!
  secpndRoleApplication: RoleApplication!
}

enum RoleApplicationScalarFieldEnum {
  createdAt
  delegationId
  id
  nationId
  nonStateActorId
  rank
  updatedAt
}

input RoleApplicationUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  delegationId: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  nationId: NullableStringFieldUpdateOperationsInput
  nonStateActorId: NullableStringFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RoleApplicationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RoleApplicationUpdateManyWithoutDelegationNestedInput {
  connect: [RoleApplicationWhereUniqueInput!]
  disconnect: [RoleApplicationWhereUniqueInput!]
  set: [RoleApplicationWhereUniqueInput!]
}

input RoleApplicationUpdateManyWithoutNationNestedInput {
  connect: [RoleApplicationWhereUniqueInput!]
  disconnect: [RoleApplicationWhereUniqueInput!]
  set: [RoleApplicationWhereUniqueInput!]
}

input RoleApplicationUpdateManyWithoutNonStateActorNestedInput {
  connect: [RoleApplicationWhereUniqueInput!]
  disconnect: [RoleApplicationWhereUniqueInput!]
  set: [RoleApplicationWhereUniqueInput!]
}

input RoleApplicationWhereInput {
  AND: [RoleApplicationWhereInput!]
  NOT: [RoleApplicationWhereInput!]
  OR: [RoleApplicationWhereInput!]
  createdAt: DateTimeFilter
  delegation: DelegationWhereInput
  delegationId: StringFilter
  id: StringFilter
  nation: NationWhereInput
  nationId: StringNullableFilter
  nonStateActor: NonStateActorWhereInput
  nonStateActorId: StringNullableFilter
  rank: IntFilter
  updatedAt: DateTimeFilter
}

input RoleApplicationWhereUniqueInput {
  AND: [RoleApplicationWhereInput!]
  NOT: [RoleApplicationWhereInput!]
  OR: [RoleApplicationWhereInput!]
  createdAt: DateTimeFilter
  delegation: DelegationWhereInput
  delegationId: StringFilter
  delegationId_nationId: RoleApplicationDelegationIdNationIdCompoundUniqueInput
  delegationId_nonStateActorId: RoleApplicationDelegationIdNonStateActorIdCompoundUniqueInput
  delegationId_rank: RoleApplicationDelegationIdRankCompoundUniqueInput
  id: String
  nation: NationWhereInput
  nationId: StringNullableFilter
  nonStateActor: NonStateActorWhereInput
  nonStateActorId: StringNullableFilter
  rank: IntFilter
  updatedAt: DateTimeFilter
}

type SetAssignmentDataResult {
  success: Boolean!
}

"""An individual applicant who applies without a delegation."""
type SingleParticipant {
  applied: Boolean!
  appliedForRoles: [CustomConferenceRole!]!
  assignedRole: CustomConferenceRole

  """For example the country of an IGH judge"""
  assignmentDetails: String
  conference: Conference!
  experience: String
  id: ID!
  motivation: String
  school: String
  user: User!
}

input SingleParticipantConferenceIdUserIdCompoundUniqueInput {
  conferenceId: String!
  userId: String!
}

input SingleParticipantCreateInput {
  applied: Boolean
  appliedForRoles: CustomConferenceRoleCreateNestedManyWithoutSingleParticipantInput
  assignedRoleId: String
  assignmentDetails: String
  conferenceId: String!
  createdAt: DateTime
  experience: String
  id: String
  motivation: String
  school: String
  updatedAt: DateTime
  userId: String!
}

input SingleParticipantCreateNestedManyWithoutAppliedForRolesInput {
  connect: [SingleParticipantWhereUniqueInput!]
}

input SingleParticipantCreateNestedManyWithoutAssignedRoleInput {
  connect: [SingleParticipantWhereUniqueInput!]
}

input SingleParticipantCreateNestedManyWithoutConferenceInput {
  connect: [SingleParticipantWhereUniqueInput!]
}

input SingleParticipantCreateNestedManyWithoutUserInput {
  connect: [SingleParticipantWhereUniqueInput!]
}

input SingleParticipantListRelationFilter {
  every: SingleParticipantWhereInput
  none: SingleParticipantWhereInput
  some: SingleParticipantWhereInput
}

input SingleParticipantOrderByRelationAggregateInput {
  _count: SortOrder
}

input SingleParticipantOrderByWithRelationInput {
  applied: SortOrder
  appliedForRoles: CustomConferenceRoleOrderByRelationAggregateInput
  assignedRole: CustomConferenceRoleOrderByWithRelationInput
  assignedRoleId: SortOrder
  assignmentDetails: SortOrder
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  experience: SortOrder
  id: SortOrder
  motivation: SortOrder
  school: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SingleParticipantScalarFieldEnum {
  applied
  assignedRoleId
  assignmentDetails
  conferenceId
  createdAt
  experience
  id
  motivation
  school
  updatedAt
  userId
}

input SingleParticipantUpdateInput {
  applied: BoolFieldUpdateOperationsInput
  appliedForRoles: CustomConferenceRoleUpdateManyWithoutSingleParticipantNestedInput
  assignedRoleId: NullableStringFieldUpdateOperationsInput
  assignmentDetails: NullableStringFieldUpdateOperationsInput
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  experience: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  motivation: NullableStringFieldUpdateOperationsInput
  school: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input SingleParticipantUpdateManyMutationInput {
  applied: BoolFieldUpdateOperationsInput
  assignmentDetails: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  experience: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  motivation: NullableStringFieldUpdateOperationsInput
  school: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SingleParticipantUpdateManyWithoutAppliedForRolesNestedInput {
  connect: [SingleParticipantWhereUniqueInput!]
  disconnect: [SingleParticipantWhereUniqueInput!]
  set: [SingleParticipantWhereUniqueInput!]
}

input SingleParticipantUpdateManyWithoutAssignedRoleNestedInput {
  connect: [SingleParticipantWhereUniqueInput!]
  disconnect: [SingleParticipantWhereUniqueInput!]
  set: [SingleParticipantWhereUniqueInput!]
}

input SingleParticipantUpdateManyWithoutConferenceNestedInput {
  connect: [SingleParticipantWhereUniqueInput!]
  disconnect: [SingleParticipantWhereUniqueInput!]
  set: [SingleParticipantWhereUniqueInput!]
}

input SingleParticipantUpdateManyWithoutUserNestedInput {
  connect: [SingleParticipantWhereUniqueInput!]
  disconnect: [SingleParticipantWhereUniqueInput!]
  set: [SingleParticipantWhereUniqueInput!]
}

input SingleParticipantWhereInput {
  AND: [SingleParticipantWhereInput!]
  NOT: [SingleParticipantWhereInput!]
  OR: [SingleParticipantWhereInput!]
  applied: BoolFilter
  appliedForRoles: CustomConferenceRoleListRelationFilter
  assignedRole: CustomConferenceRoleWhereInput
  assignedRoleId: StringNullableFilter
  assignmentDetails: StringNullableFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  experience: StringNullableFilter
  id: StringFilter
  motivation: StringNullableFilter
  school: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input SingleParticipantWhereUniqueInput {
  AND: [SingleParticipantWhereInput!]
  NOT: [SingleParticipantWhereInput!]
  OR: [SingleParticipantWhereInput!]
  applied: BoolFilter
  appliedForRoles: CustomConferenceRoleListRelationFilter
  assignedRole: CustomConferenceRoleWhereInput
  assignedRoleId: StringNullableFilter
  assignmentDetails: StringNullableFilter
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  conferenceId_userId: SingleParticipantConferenceIdUserIdCompoundUniqueInput
  createdAt: DateTimeFilter
  experience: StringNullableFilter
  id: String
  motivation: StringNullableFilter
  school: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

enum SortOrder {
  asc
  desc
}

type StatisticsResult {
  age: StatisticsResultRegisteredAge!
  countdowns: StatisticsResultCountdowns!
  diet: StatisticsResultRegisteredParticipantDiet!
  gender: StatisticsResultRegisteredParticipantGender!
  registered: StatisticsResultRegistered!
  status: StatisticsResultRegisteredParticipantStatus!
}

type StatisticsResultCountdowns {
  daysUntilConference: Int!
  daysUntilEndRegistration: Int!
}

type StatisticsResultRegistered {
  applied: Int!
  delegationMembers: StatisticsResultRegisteredDelegationMembers!
  delegations: StatisticsResultRegisteredDelegations!
  notApplied: Int!
  singleParticipants: StatisticsResultRegisteredSingleParticipants!
  supervisors: Int!
  total: Int!
}

type StatisticsResultRegisteredAge {
  average: Float!
  distribution: [StatisticsResultRegisteredAgeDistribution!]!
}

type StatisticsResultRegisteredAgeDistribution {
  key: String!
  value: Float!
}

type StatisticsResultRegisteredDelegationMembers {
  applied: Int!
  notApplied: Int!
  total: Int!
}

type StatisticsResultRegisteredDelegations {
  applied: Int!
  notApplied: Int!
  total: Int!
  withSupervisor: Int!
}

type StatisticsResultRegisteredParticipantDiet {
  delegationMembers: StatisticsResultRegisteredParticipantDietVariations!
  singleParticipants: StatisticsResultRegisteredParticipantDietVariations!
  supervisors: StatisticsResultRegisteredParticipantDietVariations!
  teamMembers: StatisticsResultRegisteredParticipantDietVariations!
}

type StatisticsResultRegisteredParticipantDietVariations {
  omnivore: Int!
  vegan: Int!
  vegetarian: Int!
}

type StatisticsResultRegisteredParticipantGender {
  delegationMembers: StatisticsResultRegisteredParticipantGenderVariations!
  singleParticipants: StatisticsResultRegisteredParticipantGenderVariations!
  supervisors: StatisticsResultRegisteredParticipantGenderVariations!
  teamMembers: StatisticsResultRegisteredParticipantGenderVariations!
}

type StatisticsResultRegisteredParticipantGenderVariations {
  diverse: Int!
  female: Int!
  male: Int!
  noStatement: Int!
}

type StatisticsResultRegisteredParticipantStatus {
  didAttend: Int!
  paymentStatus: StatisticsResultRegisteredParticipantStatusPayment!
  postalStatus: StatisticsResultRegisteredParticipantStatusPostalRegistration!
}

type StatisticsResultRegisteredParticipantStatusPayment {
  done: Int!
  problem: Int!
}

type StatisticsResultRegisteredParticipantStatusPostalRegistration {
  done: Int!
  problem: Int!
}

type StatisticsResultRegisteredSingleParticipants {
  applied: Int!
  byRole: [StatisticsResultRegisteredSingleParticipantsByRole!]!
  notApplied: Int!
  total: Int!
}

type StatisticsResultRegisteredSingleParticipantsByRole {
  applied: Int!
  fontAwesomeIcon: String
  notApplied: Int!
  role: String!
  total: Int!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

"""
A member of the team organizing the conference. Mostly used for admin stuff, enjoys elevated permissions.
"""
type TeamMember {
  conference: Conference!
  id: ID!
  role: TeamRole!
  user: User!
}

input TeamMemberConferenceIdUserIdCompoundUniqueInput {
  conferenceId: String!
  userId: String!
}

input TeamMemberCreateInput {
  conferenceId: String!
  createdAt: DateTime
  id: String
  role: TeamRole
  updatedAt: DateTime
  userId: String!
}

input TeamMemberCreateNestedManyWithoutConferenceInput {
  connect: [TeamMemberWhereUniqueInput!]
}

input TeamMemberCreateNestedManyWithoutUserInput {
  connect: [TeamMemberWhereUniqueInput!]
}

input TeamMemberListRelationFilter {
  every: TeamMemberWhereInput
  none: TeamMemberWhereInput
  some: TeamMemberWhereInput
}

input TeamMemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input TeamMemberOrderByWithRelationInput {
  conference: ConferenceOrderByWithRelationInput
  conferenceId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum TeamMemberScalarFieldEnum {
  conferenceId
  createdAt
  id
  role
  updatedAt
  userId
}

input TeamMemberUpdateInput {
  conferenceId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TeamMemberUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamMemberUpdateManyWithoutConferenceNestedInput {
  connect: [TeamMemberWhereUniqueInput!]
  disconnect: [TeamMemberWhereUniqueInput!]
  set: [TeamMemberWhereUniqueInput!]
}

input TeamMemberUpdateManyWithoutUserNestedInput {
  connect: [TeamMemberWhereUniqueInput!]
  disconnect: [TeamMemberWhereUniqueInput!]
  set: [TeamMemberWhereUniqueInput!]
}

input TeamMemberWhereInput {
  AND: [TeamMemberWhereInput!]
  NOT: [TeamMemberWhereInput!]
  OR: [TeamMemberWhereInput!]
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  role: EnumTeamRoleFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input TeamMemberWhereUniqueInput {
  AND: [TeamMemberWhereInput!]
  NOT: [TeamMemberWhereInput!]
  OR: [TeamMemberWhereInput!]
  conference: ConferenceWhereInput
  conferenceId: StringFilter
  conferenceId_userId: TeamMemberConferenceIdUserIdCompoundUniqueInput
  createdAt: DateTimeFilter
  id: String
  role: EnumTeamRoleFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

enum TeamRole {
  MEMBER
  PARTICIPANT_CARE
  PROJECT_MANAGEMENT
}

enum TransactionIsolationLevel {
  ReadCommitted
  ReadUncommitted
  RepeatableRead
  Serializable
}

input UpdateConferenceParticipantStatusInput {
  didAttend: Boolean
  guardianConsent: AdministrativeStatus
  mediaConsent: AdministrativeStatus
  paymentStatus: AdministrativeStatus
  termsAndConditions: AdministrativeStatus
}

type UpsertSelfResult {
  userNeedsAdditionalInfo: Boolean!
}

"""A user in the system. Often received by our OIDC provider"""
type User {
  apartment: String
  birthday: DateTime
  city: String
  conferenceParticipantStatus: [ConferenceParticipantStatus!]!
  conferenceSupervisor: [ConferenceSupervisor!]!
  country: String
  delegationMemberships: [DelegationMember!]!
  email: String!
  family_name: String!
  foodPreference: FoodPreference
  gender: Gender
  given_name: String!
  id: ID!
  locale: String!
  phone: String
  preferred_username: String!
  pronouns: String
  singleParticipant: [SingleParticipant!]!
  street: String
  teamMember: [TeamMember!]!
  wantsJoinTeamInformation: Boolean!
  wantsToReceiveGeneralInformation: Boolean!
  zip: String
}

input UserCreateInput {
  apartment: String
  birthday: DateTime
  city: String
  conferenceParticipantStatus: ConferenceParticipantStatusCreateNestedManyWithoutUserInput
  conferenceSupervisor: ConferenceSupervisorCreateNestedManyWithoutUserInput
  country: String
  createdAt: DateTime
  delegationMemberships: DelegationMemberCreateNestedManyWithoutUserInput
  email: String!
  family_name: String!
  foodPreference: FoodPreference
  gender: Gender
  given_name: String!
  id: String
  locale: String!
  ownPaymentTransactions: PaymentTransactionCreateNestedManyWithoutUserInput
  paymentTransactionsReferences: UserReferenceInPaymentTransactionCreateNestedManyWithoutUserInput
  phone: String
  preferred_username: String!
  pronouns: String
  singleParticipant: SingleParticipantCreateNestedManyWithoutUserInput
  street: String
  teamMember: TeamMemberCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  wantsJoinTeamInformation: Boolean
  wantsToReceiveGeneralInformation: Boolean
  zip: String
}

input UserOrderByWithRelationInput {
  apartment: SortOrder
  birthday: SortOrder
  city: SortOrder
  conferenceParticipantStatus: ConferenceParticipantStatusOrderByRelationAggregateInput
  conferenceSupervisor: ConferenceSupervisorOrderByRelationAggregateInput
  country: SortOrder
  createdAt: SortOrder
  delegationMemberships: DelegationMemberOrderByRelationAggregateInput
  email: SortOrder
  family_name: SortOrder
  foodPreference: SortOrder
  gender: SortOrder
  given_name: SortOrder
  id: SortOrder
  locale: SortOrder
  ownPaymentTransactions: PaymentTransactionOrderByRelationAggregateInput
  paymentTransactionsReferences: UserReferenceInPaymentTransactionOrderByRelationAggregateInput
  phone: SortOrder
  preferred_username: SortOrder
  pronouns: SortOrder
  singleParticipant: SingleParticipantOrderByRelationAggregateInput
  street: SortOrder
  teamMember: TeamMemberOrderByRelationAggregateInput
  updatedAt: SortOrder
  wantsJoinTeamInformation: SortOrder
  wantsToReceiveGeneralInformation: SortOrder
  zip: SortOrder
}

input UserReferenceInPaymentTransactionCreateInput {
  createdAt: DateTime
  id: String
  paymentTransactionId: String!
  updatedAt: DateTime
  userId: String!
}

input UserReferenceInPaymentTransactionCreateNestedManyWithoutPaymentTransactionInput {
  connect: [UserReferenceInPaymentTransactionWhereUniqueInput!]
}

input UserReferenceInPaymentTransactionCreateNestedManyWithoutUserInput {
  connect: [UserReferenceInPaymentTransactionWhereUniqueInput!]
}

input UserReferenceInPaymentTransactionListRelationFilter {
  every: UserReferenceInPaymentTransactionWhereInput
  none: UserReferenceInPaymentTransactionWhereInput
  some: UserReferenceInPaymentTransactionWhereInput
}

input UserReferenceInPaymentTransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserReferenceInPaymentTransactionOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  paymentTransaction: PaymentTransactionOrderByWithRelationInput
  paymentTransactionId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserReferenceInPaymentTransactionScalarFieldEnum {
  createdAt
  id
  paymentTransactionId
  updatedAt
  userId
}

input UserReferenceInPaymentTransactionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  paymentTransactionId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserReferenceInPaymentTransactionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserReferenceInPaymentTransactionUpdateManyWithoutPaymentTransactionNestedInput {
  connect: [UserReferenceInPaymentTransactionWhereUniqueInput!]
  disconnect: [UserReferenceInPaymentTransactionWhereUniqueInput!]
  set: [UserReferenceInPaymentTransactionWhereUniqueInput!]
}

input UserReferenceInPaymentTransactionUpdateManyWithoutUserNestedInput {
  connect: [UserReferenceInPaymentTransactionWhereUniqueInput!]
  disconnect: [UserReferenceInPaymentTransactionWhereUniqueInput!]
  set: [UserReferenceInPaymentTransactionWhereUniqueInput!]
}

input UserReferenceInPaymentTransactionWhereInput {
  AND: [UserReferenceInPaymentTransactionWhereInput!]
  NOT: [UserReferenceInPaymentTransactionWhereInput!]
  OR: [UserReferenceInPaymentTransactionWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  paymentTransaction: PaymentTransactionWhereInput
  paymentTransactionId: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input UserReferenceInPaymentTransactionWhereUniqueInput {
  AND: [UserReferenceInPaymentTransactionWhereInput!]
  NOT: [UserReferenceInPaymentTransactionWhereInput!]
  OR: [UserReferenceInPaymentTransactionWhereInput!]
  createdAt: DateTimeFilter
  id: String
  paymentTransaction: PaymentTransactionWhereInput
  paymentTransactionId: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

enum UserScalarFieldEnum {
  apartment
  birthday
  city
  country
  createdAt
  email
  family_name
  foodPreference
  gender
  given_name
  id
  locale
  phone
  preferred_username
  pronouns
  street
  updatedAt
  wantsJoinTeamInformation
  wantsToReceiveGeneralInformation
  zip
}

input UserScalarRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserUpdateDataInput {
  apartment: String
  birthday: DateTime!
  city: String!
  country: String!
  foodPreference: String!
  gender: Gender!
  phone: String!
  pronouns: String
  street: String!
  wantsJoinTeamInformation: Boolean
  wantsToReceiveGeneralInformation: Boolean
  zip: String!
}

input UserUpdateInput {
  apartment: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  conferenceParticipantStatus: ConferenceParticipantStatusUpdateManyWithoutUserNestedInput
  conferenceSupervisor: ConferenceSupervisorUpdateManyWithoutUserNestedInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  delegationMemberships: DelegationMemberUpdateManyWithoutUserNestedInput
  email: StringFieldUpdateOperationsInput
  family_name: StringFieldUpdateOperationsInput
  foodPreference: NullableEnumFoodPreferenceFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  given_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  locale: StringFieldUpdateOperationsInput
  ownPaymentTransactions: PaymentTransactionUpdateManyWithoutUserNestedInput
  paymentTransactionsReferences: UserReferenceInPaymentTransactionUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  preferred_username: StringFieldUpdateOperationsInput
  pronouns: NullableStringFieldUpdateOperationsInput
  singleParticipant: SingleParticipantUpdateManyWithoutUserNestedInput
  street: NullableStringFieldUpdateOperationsInput
  teamMember: TeamMemberUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  wantsJoinTeamInformation: BoolFieldUpdateOperationsInput
  wantsToReceiveGeneralInformation: BoolFieldUpdateOperationsInput
  zip: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  apartment: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  family_name: StringFieldUpdateOperationsInput
  foodPreference: NullableEnumFoodPreferenceFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  given_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  locale: StringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  preferred_username: StringFieldUpdateOperationsInput
  pronouns: NullableStringFieldUpdateOperationsInput
  street: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  wantsJoinTeamInformation: BoolFieldUpdateOperationsInput
  wantsToReceiveGeneralInformation: BoolFieldUpdateOperationsInput
  zip: NullableStringFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  apartment: StringNullableFilter
  birthday: DateTimeNullableFilter
  city: StringNullableFilter
  conferenceParticipantStatus: ConferenceParticipantStatusListRelationFilter
  conferenceSupervisor: ConferenceSupervisorListRelationFilter
  country: StringNullableFilter
  createdAt: DateTimeFilter
  delegationMemberships: DelegationMemberListRelationFilter
  email: StringFilter
  family_name: StringFilter
  foodPreference: EnumFoodPreferenceNullableFilter
  gender: EnumGenderNullableFilter
  given_name: StringFilter
  id: StringFilter
  locale: StringFilter
  ownPaymentTransactions: PaymentTransactionListRelationFilter
  paymentTransactionsReferences: UserReferenceInPaymentTransactionListRelationFilter
  phone: StringNullableFilter
  preferred_username: StringFilter
  pronouns: StringNullableFilter
  singleParticipant: SingleParticipantListRelationFilter
  street: StringNullableFilter
  teamMember: TeamMemberListRelationFilter
  updatedAt: DateTimeFilter
  wantsJoinTeamInformation: BoolFilter
  wantsToReceiveGeneralInformation: BoolFilter
  zip: StringNullableFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  apartment: StringNullableFilter
  birthday: DateTimeNullableFilter
  city: StringNullableFilter
  conferenceParticipantStatus: ConferenceParticipantStatusListRelationFilter
  conferenceSupervisor: ConferenceSupervisorListRelationFilter
  country: StringNullableFilter
  createdAt: DateTimeFilter
  delegationMemberships: DelegationMemberListRelationFilter
  email: String
  family_name: StringFilter
  foodPreference: EnumFoodPreferenceNullableFilter
  gender: EnumGenderNullableFilter
  given_name: StringFilter
  id: String
  locale: StringFilter
  ownPaymentTransactions: PaymentTransactionListRelationFilter
  paymentTransactionsReferences: UserReferenceInPaymentTransactionListRelationFilter
  phone: StringNullableFilter
  preferred_username: StringFilter
  pronouns: StringNullableFilter
  singleParticipant: SingleParticipantListRelationFilter
  street: StringNullableFilter
  teamMember: TeamMemberListRelationFilter
  updatedAt: DateTimeFilter
  wantsJoinTeamInformation: BoolFilter
  wantsToReceiveGeneralInformation: BoolFilter
  zip: StringNullableFilter
}

input updateManyDelegationMemberInputTypeArrayValue {
  committeeId: String!
  delegationMemberId: String!
}
