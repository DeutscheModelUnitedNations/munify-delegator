x-db-credentials:
  &db-credentials # Use the default POSTGRES_ credentials if they're available or simply default to "listmonk"
  POSTGRES_USER: &db-user listmonk # for database user, password, and database name
  POSTGRES_PASSWORD: &db-password listmonk
  POSTGRES_DB: &db-name listmonk

services:
  postgres:
    image: postgres:18
    container_name: postgres-dev-delegator
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d postgres -U postgres']
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - delegator-dev:/var/lib/postgresql/data

  # When using the mock server this can be helpful to paste into the form to create a valid token with claims etc.
  # {
  #  "email": "my@mail.com",
  #  "family_name": "Munify",
  #  "given_name": "Delegator Jr.",
  #  "preferred_username": "delegatoruser_123",
  #  "locale": "de",
  #  "urn:zitadel:iam:org:project:275671427955294244:roles": {"admin": {}}
  # }
  mockoidc:
    image: ghcr.io/navikt/mock-oauth2-server:2.1.10
    ports:
      - 8080:8080
    environment:
      JSON_CONFIG: >
        {
          "interactiveLogin": true,
          "httpServer": "NettyWrapper",
          "tokenCallbacks": [
              {
                "issuerId": "issuer1",
                "tokenExpiry": 120,
                "requestMappings": [
                  {
                    "requestParam": "code",
                    "match": "code1",
                    "claims": {
                      "sub": "subByCode",
                      "aud": [
                          "audByCode"
                      ]
                    }
                  }
                ]
              }
          ],
          "loginPagePath": "/static/mock-oidc-landingpage.html"
        }
    volumes:
      - ./mock-oidc-landingpage.html:/static/mock-oidc-landingpage.html

  # app:
  #   image: munifydelegator
  #   depends_on:
  #     - postgres
  #   network_mode: host
  #   environment:
  #     - PORT=3000
  #     - DATABASE_URL=postgres://postgres:postgres@localhost:5432/postgres

  #     - PUBLIC_OIDC_AUTHORITY=http://localhost:8080
  #     # - PUBLIC_OIDC_AUTHORITY=https://guard.munify.cloud

  #     - PUBLIC_OIDC_CLIENT_ID=delegator
  #     # - PUBLIC_OIDC_CLIENT_ID=275671515582758948@dev

  #     - SECRET=123

  listmonk_app:
    image: listmonk/listmonk:latest
    container_name: listmonk_app
    restart: unless-stopped
    ports:
      - '9000:9000' # To change the externally exposed port, change to: $custom_port:9000
    hostname: localhost:9000 # Recommend using FQDN for hostname
    depends_on:
      - listmonk_db
    command:
      [
        sh,
        -c,
        "./listmonk --install --idempotent --yes --config '' && ./listmonk --upgrade --yes --config '' && ./listmonk --config ''"
      ]
      # --config (file) param is set to empty so that listmonk only uses the env vars (below) for config.
      # --install --idempotent ensures that DB installation happens only once on an empty DB, on the first ever start.
      # --upgrade automatically runs any DB migrations when a new image is pulled.

    environment: # The same params as in config.toml are passed as env vars here.
      LISTMONK_app__address: 0.0.0.0:9000
      LISTMONK_db__user: *db-user
      LISTMONK_db__password: *db-password
      LISTMONK_db__database: *db-name
      LISTMONK_db__host: listmonk_db
      LISTMONK_db__port: 5432
      LISTMONK_db__ssl_mode: disable
      LISTMONK_db__max_open: 25
      LISTMONK_db__max_idle: 25
      LISTMONK_db__max_lifetime: 300s
      TZ: Etc/UTC
      LISTMONK_ADMIN_USER: ${LISTMONK_ADMIN_USER:-} # If these (optional) are set during the first `docker compose up`, then the Super Admin user is automatically created.
      LISTMONK_ADMIN_PASSWORD: ${LISTMONK_ADMIN_PASSWORD:-} # Otherwise, the user can be setup on the web app after the first visit to http://localhost:9000

  # Listmonk Postgres database
  listmonk_db:
    image: postgres:17-alpine
    container_name: listmonk_db
    restart: unless-stopped
    ports:
      - '5433:5432' # Only bind on the local interface. To connect to Postgres externally, change this to 0.0.0.0
    environment:
      <<: *db-credentials
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U listmonk']
      interval: 10s
      timeout: 5s
      retries: 6
    volumes:
      - type: volume
        source: listmonk-data
        target: /var/lib/postgresql/data

volumes:
  delegator-dev:
  listmonk-data:
